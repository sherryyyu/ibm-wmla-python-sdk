{
  "swagger" : "2.0",
  "info" : {
    "description" : "Discover REST APIs available within Liberty",
    "version" : "1.0.0",
    "title" : "Liberty REST APIs"
  },
  "host" : "stumaster.rch.stglabs.ibm.com:9280",
  "tags" : [ {
    "name" : "ModelTemplates",
    "description" : "Manage deep learning model templates."
  }, {
    "name" : "HyperSearch",
    "description" : "Manage hyper parameters search."
  }, {
    "name" : "Configuration",
    "description" : "Display the deep learning processing daemon service configuration parameters."
  }, {
    "name" : "Execute",
    "description" : "Execute deep learning models with framework plugins."
  }, {
    "name" : "ModelValidations",
    "description" : "Manage deep learning model validations."
  }, {
    "name" : "Scheduler",
    "description" : "Display information about deep learning Spark applications."
  }, {
    "name" : "Inferences",
    "description" : "Manage deep learning model inferences."
  }, {
    "name" : "ModelTunings",
    "description" : "Manage deep learning model tunings."
  }, {
    "name" : "Datasets",
    "description" : "Manage deep learning datasets."
  }, {
    "name" : "ElasticDistributedInference",
    "description" : "Manage elastic distributed inference models."
  }, {
    "name" : "ModelTrainings",
    "description" : "Manage deep learning model trainings."
  }, {
    "name" : "Frameworks",
    "description" : "Display information about deep learning frameworks."
  }, {
    "name" : "Models",
    "description" : "Manage deep learning models."
  } ],
  "definitions" : {
    "Pictures" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the image."
        },
        "path" : {
          "type" : "string",
          "description" : "The path of the image."
        },
        "labels" : {
          "type" : "string",
          "description" : "The labels of the image."
        }
      }
    },
    "Policy" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the policy."
        },
        "schedule_intervel" : {
          "type" : "integer",
          "description" : "The intervel of schedule."
        },
        "kernel_min" : {
          "type" : "integer",
          "description" : "The minimal number of model kernel."
        },
        "kernel_max" : {
          "type" : "integer",
          "description" : "The maximal number of model kernel."
        },
        "kernel_delay_release_time" : {
          "type" : "integer",
          "description" : "The idle time to wait to release the kernel."
        },
        "task_execution_timeout" : {
          "type" : "integer",
          "description" : "The task execution timeout."
        },
        "task_batch_size" : {
          "type" : "integer",
          "description" : "The maximal number of task which single model can handle each time."
        },
        "stream_number_per_group" : {
          "type" : "integer",
          "description" : "The number of stream task per group."
        },
        "stream_discard_slow_tasks" : {
          "type" : "boolean",
          "description" : "Discard stream slow task if set true."
        }
      }
    },
    "DatasetDetail" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The dataset name."
        },
        "dbbackend" : {
          "type" : "string",
          "example" : "LMDB",
          "description" : "The backend database (e.g. LMDB, Other, TFrecords, CSV, ObjectDetection)."
        },
        "trainpath" : {
          "type" : "string",
          "description" : "The dataset training folder path."
        },
        "valpath" : {
          "type" : "string",
          "description" : "The dataset validation folder path."
        },
        "testpath" : {
          "type" : "string",
          "description" : "The dataset test folder path."
        },
        "meanfilepath" : {
          "type" : "string",
          "description" : "The dataset mean file path."
        },
        "status" : {
          "type" : "string",
          "description" : "The dataset status."
        },
        "runduration" : {
          "type" : "number",
          "format" : "double",
          "description" : "The application run duration."
        },
        "sigid" : {
          "type" : "string",
          "description" : "The Spark instance group ID."
        },
        "signame" : {
          "type" : "string",
          "description" : "The Spark instance group Name."
        },
        "masterUrl" : {
          "type" : "string",
          "description" : "The Spark master URL."
        },
        "driverid" : {
          "type" : "string",
          "description" : "The Spark driver ID."
        },
        "sparkappid" : {
          "type" : "string",
          "description" : "The Spark Application ID."
        },
        "imagedetail" : {
          "$ref" : "#/definitions/ImageDetail"
        },
        "trainlabels" : {
          "type" : "array",
          "description" : "The dataset training labels.",
          "items" : {
            "$ref" : "#/definitions/StringSet"
          }
        },
        "vallabels" : {
          "type" : "array",
          "description" : "The dataset validation labels.",
          "items" : {
            "$ref" : "#/definitions/StringSet"
          }
        },
        "testlabels" : {
          "type" : "array",
          "description" : "The dataset test labels.",
          "items" : {
            "$ref" : "#/definitions/StringSet"
          }
        },
        "datasourcetype" : {
          "type" : "string",
          "description" : "Type of source data for creating a new dataset.",
          "enum" : [ "LMDB", "TFRECORDS", "OTHER", "IMAGEFORCLASSIFICATION", "CSV", "IMAGEFOROBJECTDETECTION", "IMGTOVECTOR" ]
        },
        "submittedtime" : {
          "type" : "string",
          "description" : "The application submitted time."
        },
        "createUser" : {
          "type" : "string",
          "description" : "The user that creates the dataset."
        },
        "size" : {
          "type" : "number",
          "format" : "double",
          "description" : "The size of the dataset."
        },
        "shards" : {
          "type" : "integer",
          "description" : "The number of shards of the dataset."
        },
        "byclass" : {
          "type" : "boolean",
          "description" : "Whether to generate records by class."
        },
        "plugin" : {
          "type" : "string",
          "description" : "the csv plugin file path."
        }
      }
    },
    "resDef" : {
      "type" : "object",
      "required" : [ "batchsize", "framework", "maxiteration" ],
      "properties" : {
        "framework" : {
          "type" : "string",
          "description" : "The deep learning framework.",
          "enum" : [ "Caffe", "TensorFlow", "PyTorch", "PyTorchOnElastic" ]
        },
        "initWeightPath" : {
          "type" : "string",
          "description" : "Weight file path."
        },
        "maxiteration" : {
          "type" : "string",
          "description" : "The maximum iteration count."
        },
        "miniteration" : {
          "type" : "string",
          "description" : "The minimum iteration count, optional for hyperband, default value 1."
        },
        "batchsize" : {
          "type" : "integer",
          "example" : 32,
          "description" : "The batch size tuning parameter."
        },
        "gpuNum" : {
          "type" : "integer",
          "description" : "The gpu number."
        },
        "workerNum" : {
          "type" : "integer",
          "description" : "The number of workers in the cluster."
        },
        "distribute" : {
          "type" : "boolean",
          "description" : "Whether using distribute mode."
        },
        "syncMode" : {
          "type" : "string",
          "description" : "The gradient synchronization mode in elastic distributed training. This parameter to specify whether the training is a synchronous training, or an asynchronous training.",
          "enum" : [ "SYNC", "ASYNC" ]
        },
        "resourceInstanceId" : {
          "type" : "string",
          "description" : "Instance group id"
        }
      },
      "description" : "The deep learning tuning resource definition."
    },
    "Attr" : {
      "type" : "object",
      "required" : [ "key", "value" ],
      "properties" : {
        "key" : {
          "type" : "string",
          "description" : "The key."
        },
        "value" : {
          "type" : "string",
          "description" : "The value."
        }
      }
    },
    "InferenceCreateParam" : {
      "type" : "object",
      "required" : [ "modelName", "trainName" ],
      "properties" : {
        "modelName" : {
          "type" : "string",
          "description" : "The name of the model."
        },
        "trainName" : {
          "type" : "string",
          "description" : "The name of the model training."
        },
        "inferenceModelName" : {
          "type" : "string",
          "description" : "The name of the new inference model."
        }
      }
    },
    "RAService" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Resource manager for Elastic Distributed Inference, currently only support ego"
        },
        "resource_group" : {
          "type" : "string",
          "description" : "Ego resource group for Elastic Distributed Inference"
        },
        "consumer" : {
          "type" : "string",
          "description" : "Ego consumer for Elastic Distributed Inference"
        },
        "resreq" : {
          "type" : "string",
          "description" : "Ego resource filter for Elastic Distributed Inference"
        }
      }
    },
    "Container" : {
      "type" : "object",
      "properties" : {
        "container_uid" : {
          "type" : "string",
          "description" : "The uid for container."
        },
        "container_host" : {
          "type" : "string",
          "description" : "The host for container."
        },
        "container_status" : {
          "type" : "string",
          "description" : "The status for container."
        },
        "total_task" : {
          "type" : "integer",
          "description" : "The number of all tasks in the container."
        },
        "running_task" : {
          "type" : "integer",
          "description" : "The number of running tasks in the container."
        },
        "finish_task" : {
          "type" : "integer",
          "description" : "The number of finish tasks in the container."
        },
        "failed_task" : {
          "type" : "integer",
          "description" : "The number of failed tasks in the container."
        }
      }
    },
    "ValidateOutPair" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The validation result pair name."
        },
        "value" : {
          "type" : "string",
          "description" : "The validation result pair value."
        }
      }
    },
    "searchExperiment" : {
      "type" : "object",
      "required" : [ "fixedHyperParams", "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "description" : "experiment id."
        },
        "fixedHyperParams" : {
          "type" : "array",
          "description" : "List of hyperparameters used in this experiment training.",
          "items" : {
            "$ref" : "#/definitions/fixedHyperParam"
          }
        }
      }
    },
    "PredictResult" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "The type of the prediction."
        },
        "classificationResults" : {
          "type" : "array",
          "description" : "The results of classification.",
          "items" : {
            "$ref" : "#/definitions/ClassificationDetDetail"
          }
        },
        "detResults" : {
          "type" : "array",
          "description" : "Det results.",
          "items" : {
            "$ref" : "#/definitions/ClassificationDetDetail"
          }
        },
        "comparisonResults" : {
          "type" : "array",
          "description" : "Comparison results.",
          "items" : {
            "$ref" : "#/definitions/ComparisonDetail"
          }
        }
      }
    },
    "ValidateDetail" : {
      "type" : "object",
      "properties" : {
        "modelname" : {
          "type" : "string",
          "description" : "The deep learning model name."
        },
        "dataSet" : {
          "type" : "string",
          "description" : "The deep learning dataset name."
        },
        "status" : {
          "type" : "string",
          "description" : "The deep learning validation status."
        },
        "driverId" : {
          "type" : "string",
          "description" : "The Spark driver ID."
        },
        "appid" : {
          "type" : "string",
          "description" : "The Spark application ID."
        },
        "appURL" : {
          "type" : "string",
          "description" : "The Spark application URL."
        },
        "historyServerUrl" : {
          "type" : "string",
          "description" : "The Spark history server URL."
        },
        "valParameters" : {
          "$ref" : "#/definitions/ValidateParameters"
        },
        "outPairs" : {
          "$ref" : "#/definitions/ValidateOutPair"
        }
      }
    },
    "algoParams" : {
      "type" : "object",
      "required" : [ "name", "value" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the search algorithm parameter name."
        },
        "value" : {
          "type" : "string",
          "description" : "Value for the corresponding algirhtm parameter."
        }
      }
    },
    "HpoMetric" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Metric name."
        },
        "min" : {
          "type" : "number",
          "format" : "double",
          "description" : "Minimal value of the metric."
        },
        "max" : {
          "type" : "number",
          "format" : "double",
          "description" : "Maximal value of the metric."
        },
        "latest" : {
          "type" : "number",
          "format" : "double",
          "description" : "Latest value of the metric."
        }
      }
    },
    "HpoAlgorithmDesc" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The hpo algorithm name."
        },
        "path" : {
          "type" : "string",
          "description" : "The hpo algorithm installation path (only for plugin algorithm)."
        },
        "condaHome" : {
          "type" : "string",
          "description" : "The CONDA_HOME used to run hpo algorithm (only for plugin algorithm)."
        },
        "condaEnv" : {
          "type" : "string",
          "description" : "The conda environment used to run hpo algorithm (only for plugin algorithm)."
        },
        "createtime" : {
          "type" : "string",
          "description" : "The creation time of the hpo algorithm (only for plugin algorithm)."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the hpo algorithm."
        },
        "remoteExec" : {
          "type" : "boolean",
          "description" : "The plugin algorithm execution mode is remoted or not (only for plugin algorithm)."
        },
        "logLevel" : {
          "type" : "string",
          "description" : "The log level for the plugin algorithm (only for plugin algorithm)."
        }
      }
    },
    "ModelDetail" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the deep learning model."
        },
        "path" : {
          "type" : "string",
          "description" : "The path of the deep learning model."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the deep learning model."
        },
        "templatename" : {
          "type" : "string",
          "description" : "The deep learning model template name."
        },
        "framework" : {
          "type" : "string",
          "example" : "Caffe",
          "description" : "The deep learning model framework.",
          "enum" : [ "Caffe", "TensorFlow", "PyTorch" ]
        },
        "accelerator" : {
          "type" : "string",
          "example" : "Native",
          "description" : "The deep learning model training engine.",
          "enum" : [ "Single", "Native", "Elastic" ]
        },
        "hyperparameter" : {
          "$ref" : "#/definitions/HyperParameter"
        },
        "dataset" : {
          "type" : "string",
          "description" : "The name of the the dataset associated with the deep learning model."
        },
        "batchsize" : {
          "type" : "integer",
          "example" : 32,
          "description" : "The batch size."
        },
        "solverprototxtpath" : {
          "type" : "string",
          "description" : "The path to *solver.prototxt configuration file."
        },
        "traintestprototxtpath" : {
          "type" : "string",
          "description" : "The path to *train_test.prototxt configuration file."
        },
        "inferenceprototxtpath" : {
          "type" : "string",
          "description" : "The path for inference configuration file."
        },
        "dimimage" : {
          "type" : "string",
          "description" : "The dimimage."
        },
        "solverContent" : {
          "type" : "string",
          "description" : "The content of the *solver.prototxt configuration file."
        },
        "trainTestContent" : {
          "type" : "string",
          "description" : "The content of the *train_test.prototxt configuration file."
        },
        "inferenceContent" : {
          "type" : "string",
          "description" : "The content of the inference configuration file."
        },
        "tfmainpath" : {
          "type" : "string",
          "description" : "The main executor file path."
        },
        "tfmainContent" : {
          "type" : "string",
          "description" : "The contents of the main.py file."
        },
        "sig" : {
          "type" : "string",
          "description" : "The Spark instance group id."
        },
        "signame" : {
          "type" : "string",
          "description" : "The Spark instance group name."
        },
        "tmpfilePath" : {
          "type" : "string",
          "description" : "The path of the temporary file."
        },
        "tmpfileContent" : {
          "type" : "string",
          "description" : "Contents of the temporary file."
        },
        "wfinit" : {
          "type" : "string",
          "description" : "The initial weight file."
        },
        "wtfolder" : {
          "type" : "string",
          "description" : "The folder that contains the weight file."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the model, indicates whether it is inference model or training model.",
          "enum" : [ "Training", "Inference" ]
        },
        "user" : {
          "type" : "string",
          "description" : "The user who created the model."
        },
        "createTime" : {
          "type" : "string",
          "description" : "The time the model was created."
        },
        "frameworkVersion" : {
          "type" : "string",
          "description" : "The framework version"
        },
        "distributeStrategy" : {
          "type" : "string",
          "description" : "The distribution strategy"
        }
      }
    },
    "RAKernel" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Resource manager for model kernel, currently only support ego"
        },
        "resource_group" : {
          "type" : "string",
          "description" : "Ego resource group for model kernel"
        },
        "consumer" : {
          "type" : "string",
          "description" : "Ego consumer for model kernel"
        },
        "resreq" : {
          "type" : "string",
          "description" : "Ego resource filter for model kernel"
        }
      }
    },
    "IaSModelDescription" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "schema_version" : {
          "type" : "string",
          "description" : "The version of Elastic Distributed Inference model."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the Elastic Distributed Inference model."
        },
        "tag" : {
          "type" : "string",
          "description" : "The tag of the Elastic Distributed Inference model."
        },
        "weight_path" : {
          "type" : "string",
          "description" : "The model weight which used for inference."
        },
        "model_path" : {
          "type" : "string",
          "description" : "The inference model path."
        },
        "creator" : {
          "type" : "string",
          "description" : "The creator of the Elastic Distributed Inference model."
        },
        "runtime" : {
          "type" : "string",
          "description" : "The runtime of Elastic Distributed Inference model."
        },
        "kernel_path" : {
          "type" : "string",
          "description" : "The execution kernel for inference model."
        },
        "mk_resource_req" : {
          "type" : "string",
          "description" : "The kernel resource request of the Elastic Distributed Inference model."
        },
        "mk_umask" : {
          "type" : "string",
          "description" : "The kernel umask of Elastic Distributed Inference model."
        },
        "attributes" : {
          "type" : "array",
          "description" : "Key-value of attributes can be accessed in model kernel.",
          "items" : {
            "$ref" : "#/definitions/Attr"
          }
        },
        "mk_environments" : {
          "type" : "array",
          "description" : "Additional environment variables to run model kernel.",
          "items" : {
            "$ref" : "#/definitions/Envs"
          }
        },
        "service_uri" : {
          "type" : "string",
          "description" : "Rest Service URL."
        },
        "size" : {
          "type" : "integer",
          "description" : "The size of the Elastic Distributed Inference model."
        },
        "mk_instance_min" : {
          "type" : "integer",
          "description" : "The minimal number of instance."
        },
        "mk_instance_max" : {
          "type" : "integer",
          "description" : "The maximal number of instance."
        },
        "create_time" : {
          "type" : "string",
          "description" : "The create time of the Elastic Distributed Inference model."
        },
        "last_update_time" : {
          "type" : "string",
          "description" : "The last update time of the Elastic Distributed Inference model."
        },
        "state" : {
          "type" : "string",
          "description" : "The state of Elastic Distributed Inference model."
        }
      }
    },
    "IaSParam" : {
      "type" : "object",
      "required" : [ "edi_py", "modelPath", "name", "runtime", "weightPath" ],
      "properties" : {
        "edi_py" : {
          "type" : "string",
          "description" : "The execution kernel for inference model."
        },
        "attribute" : {
          "type" : "string",
          "description" : "Key-value of attributes can be accessed in model kernel."
        },
        "mcenv" : {
          "type" : "string",
          "description" : "Additional environment variables to run model kernel."
        },
        "name" : {
          "type" : "string",
          "description" : "The name inference model."
        },
        "type" : {
          "type" : "string",
          "description" : "The type for inference model."
        },
        "modelPath" : {
          "type" : "string",
          "description" : "The model file path for inference model."
        },
        "weightPath" : {
          "type" : "string",
          "description" : "The weight file path for inference model."
        },
        "runtime" : {
          "type" : "string",
          "description" : "The runtime for inference model."
        }
      }
    },
    "TrainDetail" : {
      "type" : "object",
      "properties" : {
        "model" : {
          "type" : "string",
          "description" : "The deep learning model name."
        },
        "dataset" : {
          "type" : "string",
          "description" : "The dataset name."
        },
        "trainingParameters" : {
          "$ref" : "#/definitions/TrainingParameters"
        }
      }
    },
    "Kernel" : {
      "type" : "object",
      "properties" : {
        "working_directory" : {
          "type" : "string",
          "description" : "Working Directory."
        },
        "connection_timeout" : {
          "type" : "integer",
          "description" : "The kernel connection timeout."
        },
        "log_directory" : {
          "type" : "string",
          "description" : "Log Directory."
        },
        "run_as" : {
          "type" : "string",
          "description" : "The kernel run as."
        },
        "umask" : {
          "type" : "string",
          "description" : "The kernel umask."
        },
        "gpu" : {
          "type" : "string",
          "description" : "Nvidia GPU policy, including no, shared, exclusive."
        },
        "envs" : {
          "$ref" : "#/definitions/Envs"
        }
      }
    },
    "IaSInstanceParam" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name for Elastic Distributed Inference model."
        },
        "state" : {
          "type" : "string",
          "description" : "The state for Elastic Distributed Inference model."
        },
        "instance" : {
          "$ref" : "#/definitions/Instance"
        }
      }
    },
    "PredictParams" : {
      "type" : "object",
      "properties" : {
        "index" : {
          "type" : "string",
          "description" : "The prediction item index."
        },
        "name" : {
          "type" : "string",
          "description" : "The prediction item name."
        },
        "proba" : {
          "type" : "number",
          "format" : "float",
          "description" : "The prediction item probability."
        }
      }
    },
    "TrainingCreateParam" : {
      "type" : "object",
      "required" : [ "clusterSize", "dlFramework", "trainName" ],
      "properties" : {
        "cmd" : {
          "type" : "string",
          "description" : "The training command."
        },
        "trainName" : {
          "type" : "string",
          "description" : "The deep learning training name."
        },
        "dlFramework" : {
          "type" : "string",
          "example" : "TensorFlow",
          "description" : "The deep learning framework name."
        },
        "wtURL" : {
          "type" : "string",
          "description" : "The training weight file URL."
        },
        "wfinit" : {
          "type" : "string",
          "description" : "The initial weight file for training."
        },
        "wtfolder" : {
          "type" : "string",
          "description" : "The training weight file folder name."
        },
        "gpuRatio" : {
          "type" : "integer",
          "description" : "The gpu ratio."
        },
        "clusterSize" : {
          "type" : "integer",
          "description" : "The number of workers in the cluster."
        },
        "testInterval" : {
          "type" : "integer",
          "description" : "Number of training runs that are run in a test interval. At each test interval the model is run against the test dataset to verify that the accuracy is sufficient. By default, the interval is set to 100."
        },
        "testIteration" : {
          "type" : "integer",
          "description" : "Number of times that the model runs against the test dataset in each interval. By default, the iteration is set to 10.  For example, if the test interval is set to 100 and the iteration is set to 10, on the hundredth training run, the model will run against the test dataset 10 times."
        },
        "syncMode" : {
          "type" : "string",
          "description" : "The gradient synchronization mode in elastic distributed training. This parameter to specify whether the training is a synchronous training, or an asynchronous training.",
          "enum" : [ "SYNC", "ASYNC" ]
        },
        "distribute" : {
          "type" : "boolean",
          "description" : "Denotes whether it is distributed or not."
        }
      }
    },
    "fixedHyperParam" : {
      "type" : "object",
      "required" : [ "dataType", "fixedVal", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Hyperparameter name, the same name will be used in the config.json so user model can load it"
        },
        "dataType" : {
          "type" : "string",
          "description" : "one of int, double, str"
        },
        "fixedVal" : {
          "type" : "string",
          "description" : "The same type with datatype specified, if dataTye=double, need fixedVal type doulbe"
        }
      }
    },
    "FrameworkDetail" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "example" : "TensorFlow",
          "description" : "The name of the deep learning framework."
        },
        "home" : {
          "type" : "string",
          "description" : "The home folder of the deep learning framework."
        },
        "backend" : {
          "type" : "string",
          "example" : "TensorFlow",
          "description" : "The deep learning framework backend."
        },
        "accelerator" : {
          "type" : "string",
          "example" : "Native",
          "description" : "The deep learning training engine.",
          "enum" : [ "Native", "Elastic" ]
        },
        "psNum" : {
          "type" : "string",
          "description" : "The psNum."
        },
        "commIPNetwork" : {
          "type" : "string",
          "description" : "The communication network."
        }
      }
    },
    "ValidationCreateParam" : {
      "type" : "object",
      "required" : [ "metrics", "trainName", "valName" ],
      "properties" : {
        "valName" : {
          "type" : "string",
          "description" : "The deep learning validation name"
        },
        "trainName" : {
          "type" : "string",
          "description" : "Name of the training to validate."
        },
        "threshold" : {
          "type" : "number",
          "format" : "double",
          "example" : 0.1,
          "description" : "The threshold value, for example, 0.1"
        },
        "metrics" : {
          "type" : "array",
          "description" : "The list of metrics, for example, \"Top1\", \"ConfusionMatrix\", \"IoU\", \"mAP\"",
          "items" : {
            "type" : "string",
            "enum" : [ "Top1", "ConfusionMatrix", "IoU", "mAP" ]
          }
        }
      }
    },
    "HpoTaskDetail" : {
      "type" : "object",
      "properties" : {
        "input" : {
          "$ref" : "#/definitions/HpoTaskInput"
        },
        "searchGrid" : {
          "$ref" : "#/definitions/searchGrid"
        },
        "state" : {
          "type" : "string",
          "example" : "RUNNING",
          "description" : "The tuning status."
        },
        "creator" : {
          "type" : "string",
          "description" : "The user who created the tuning task."
        },
        "createtime" : {
          "type" : "string",
          "description" : "The time the tuning task was created."
        },
        "sigId" : {
          "type" : "string",
          "description" : "Spark instance group id."
        },
        "sigName" : {
          "type" : "string",
          "description" : "Spark instance group name."
        },
        "consumerName" : {
          "type" : "string",
          "description" : "consumer name."
        }
      }
    },
    "ComparisonDetail" : {
      "type" : "object",
      "properties" : {
        "sampleId1" : {
          "type" : "string",
          "description" : "The first sample id."
        },
        "sampleId2" : {
          "type" : "string",
          "description" : "The second sample id."
        },
        "inputPath" : {
          "type" : "string",
          "description" : "The input path."
        },
        "isImage" : {
          "type" : "boolean",
          "description" : "True for image classification."
        },
        "distance" : {
          "type" : "number",
          "format" : "double",
          "description" : "The distance."
        },
        "isSimilar" : {
          "type" : "boolean",
          "description" : "True if similar."
        }
      }
    },
    "searchGrid" : {
      "type" : "object",
      "properties" : {
        "experiments" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HpoExperiment"
          }
        },
        "best" : {
          "$ref" : "#/definitions/HpoExperiment"
        },
        "running" : {
          "type" : "integer",
          "description" : "The total number of parallel running jobs."
        },
        "complete" : {
          "type" : "integer",
          "description" : "The number of completed jobs."
        },
        "failed" : {
          "type" : "integer",
          "description" : "The number of failed jobs."
        },
        "progress" : {
          "type" : "string",
          "description" : "The progress."
        },
        "duration" : {
          "type" : "string",
          "description" : "Run duration of this task."
        }
      }
    },
    "InferenceDetail" : {
      "type" : "object",
      "properties" : {
        "modelname" : {
          "type" : "string",
          "description" : "The deep learning model name."
        },
        "predictname" : {
          "type" : "string",
          "description" : "The prediction name."
        },
        "inputpath" : {
          "type" : "string",
          "description" : "The input directory path."
        },
        "inputfiles" : {
          "type" : "string",
          "description" : "The input files."
        },
        "output" : {
          "type" : "string",
          "description" : "The output directory path"
        },
        "threshold" : {
          "type" : "string",
          "description" : "The probability threshold for classification."
        },
        "resultfile" : {
          "type" : "string",
          "description" : "The result file name."
        },
        "result" : {
          "$ref" : "#/definitions/PredictParameters"
        },
        "status" : {
          "type" : "string",
          "description" : "The inference status."
        },
        "sigid" : {
          "type" : "string",
          "description" : "The Spark instance group ID."
        },
        "signame" : {
          "type" : "string",
          "description" : "The Spark instance group name"
        },
        "masterUrl" : {
          "type" : "string",
          "description" : "The Spark master URL"
        },
        "driverid" : {
          "type" : "string",
          "description" : "The Spark driver ID."
        },
        "appid" : {
          "type" : "string",
          "description" : "The Spark application ID."
        },
        "appURL" : {
          "type" : "string",
          "description" : "The Spark application URL."
        },
        "createTime" : {
          "type" : "string",
          "description" : "The time the inference was created."
        },
        "user" : {
          "type" : "string",
          "description" : "The user who created the inference."
        },
        "historyServerUrl" : {
          "type" : "string",
          "description" : "The Spark history server URL."
        }
      }
    },
    "ClassificationDetDetail" : {
      "type" : "object",
      "properties" : {
        "sampleId" : {
          "type" : "string",
          "description" : "The sample id."
        },
        "inputPath" : {
          "type" : "string",
          "description" : "The input path."
        },
        "isImage" : {
          "type" : "boolean",
          "description" : "True for image classification."
        },
        "results" : {
          "type" : "array",
          "description" : "The result details.",
          "items" : {
            "$ref" : "#/definitions/ClassificationDetResult"
          }
        }
      }
    },
    "DatasetCreateParam" : {
      "type" : "object",
      "required" : [ "datasourcetype", "dbbackend", "name", "sigid" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The dataset name."
        },
        "dbbackend" : {
          "type" : "string",
          "example" : "LMDB",
          "description" : "The backend database (e.g. LMDB, TFrecords, CSV, ImageVector, ObjectDetection, Other)."
        },
        "trainpath" : {
          "type" : "string",
          "description" : "The dataset training folder path."
        },
        "valpath" : {
          "type" : "string",
          "description" : "The dataset validation folder path."
        },
        "testpath" : {
          "type" : "string",
          "description" : "The dataset test folder path."
        },
        "meanfilepath" : {
          "type" : "string",
          "description" : "The dataset mean file path."
        },
        "sigid" : {
          "type" : "string",
          "description" : "The Spark instance group ID."
        },
        "imagedetail" : {
          "$ref" : "#/definitions/ImageDetail"
        },
        "shards" : {
          "type" : "integer",
          "description" : "The number of shards of the dataset. This parameter is only used when dbbackend is TFrecords."
        },
        "byclass" : {
          "type" : "boolean",
          "description" : "Whether to generate records by class. This parameter is only used when dbbackend is TFrecords."
        },
        "plugin" : {
          "type" : "string",
          "description" : "the csv plugin file path. This parameter is only used when dbbackend is CSV."
        },
        "datasourcetype" : {
          "type" : "string",
          "description" : "Type of source data for creating a new dataset.",
          "enum" : [ "LMDB", "TFRECORDS", "OTHER", "IMAGEFORCLASSIFICATION", "CSV", "IMAGEFOROBJECTDETECTION", "IMGTOVECTOR" ]
        }
      },
      "description" : "The parameters for a creating dataset."
    },
    "SparkApplicationDetail" : {
      "type" : "object",
      "properties" : {
        "sparkinstancegroupid" : {
          "type" : "string",
          "description" : "The Spark instance group ID."
        },
        "applicationid" : {
          "type" : "string",
          "description" : "The Spark application ID."
        },
        "applicationname" : {
          "type" : "string",
          "description" : "The Spark application name."
        },
        "type" : {
          "type" : "string",
          "description" : "The Spark application type.",
          "enum" : [ "BATCH", "NOTEBOOK" ]
        },
        "state" : {
          "type" : "string",
          "description" : "The Spark application state."
        },
        "uiport" : {
          "type" : "string",
          "description" : "The port number on which to access the Spark application UI."
        },
        "driver" : {
          "$ref" : "#/definitions/DriverDetail"
        },
        "executors" : {
          "type" : "array",
          "description" : "A list of Spark executors.",
          "items" : {
            "$ref" : "#/definitions/ExecutorDetail"
          }
        },
        "slots" : {
          "type" : "integer",
          "description" : "The number of slots that are used by the Spark instance group."
        },
        "demandslots" : {
          "type" : "integer",
          "description" : "The number of demanded slots that is being used by the Spark application."
        },
        "hosts" : {
          "type" : "integer",
          "description" : "The number of hosts on which Spark applications run."
        },
        "coresused" : {
          "type" : "number",
          "format" : "double",
          "description" : "The number of CPU cores that are allocated to the Spark application."
        },
        "memused" : {
          "type" : "number",
          "format" : "double",
          "description" : "The amount of memory, in MB, that is used by the Spark application."
        },
        "username" : {
          "type" : "string",
          "description" : "The user that executes the Spark application."
        },
        "driverexecutionuser" : {
          "type" : "string",
          "description" : "The execution user for the Spark drivers."
        },
        "executorexecutionuser" : {
          "type" : "string",
          "description" : "The execution user for the Spark executors."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time-stamp of the updated Spark application."
        },
        "submittedtime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The Spark application submitted time."
        },
        "masterUrl" : {
          "type" : "string",
          "description" : "The Spark master URL."
        },
        "endtime" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The Spark application finish time."
        },
        "scheduleName" : {
          "type" : "string",
          "description" : "The application schedule name."
        },
        "issharedapp" : {
          "type" : "string",
          "description" : "Specifies whether the Spark application shares RDD."
        },
        "apprunduration" : {
          "type" : "number",
          "format" : "double",
          "description" : "The application run duration."
        },
        "masterSeqNo" : {
          "type" : "integer",
          "description" : "The master sequence number."
        },
        "masterService" : {
          "type" : "string",
          "description" : "The master service name."
        },
        "model" : {
          "type" : "string",
          "description" : "The deep learning model name."
        },
        "dataset" : {
          "type" : "string",
          "description" : "The deep learning dataset name."
        },
        "dltype" : {
          "type" : "string",
          "example" : "Caffe",
          "description" : "The deep learning framework name (e.g Caffe or TensorFlow)."
        },
        "tunningname" : {
          "type" : "string",
          "description" : "The deep learning tuning name."
        },
        "sigName" : {
          "type" : "string",
          "description" : "The Spark instance group name."
        },
        "historyServerUrl" : {
          "type" : "string",
          "description" : "The Spark history server URL."
        }
      }
    },
    "StringMap" : {
      "type" : "object",
      "properties" : {
        "example_key" : {
          "type" : "string"
        }
      }
    },
    "ModelCreateParam" : {
      "type" : "object",
      "required" : [ "name", "templatename" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the deep learning model."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the deep learning model."
        },
        "templatename" : {
          "type" : "string",
          "description" : "The deep learning model template name."
        },
        "sig" : {
          "type" : "string",
          "description" : "The Spark instance group id. This parameter is required when create an inference model."
        },
        "accelerator" : {
          "type" : "string",
          "example" : "Elastic",
          "description" : "The deep learning model training engine.",
          "enum" : [ "Single", "Native", "Elastic" ]
        },
        "hyperparameter" : {
          "$ref" : "#/definitions/HyperParameter"
        },
        "dataset" : {
          "type" : "string",
          "description" : "The name of the the dataset associated with the deep learning model. This parameter is required when create a training model."
        },
        "batchsize" : {
          "type" : "integer",
          "example" : 32,
          "description" : "The batch size."
        },
        "tfmainContent" : {
          "type" : "string",
          "description" : "The contents of the main.py file."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the model, indicates whether it is inference model or normal model.",
          "enum" : [ "Training", "Inference" ]
        },
        "wtfolder" : {
          "type" : "string",
          "description" : "The folder that contains the weight file."
        },
        "frameworkVersion" : {
          "type" : "string",
          "description" : "The framework version"
        },
        "distributeStrategy" : {
          "type" : "string",
          "description" : "The distribution strategy"
        }
      }
    },
    "CreationResponse" : {
      "type" : "object",
      "properties" : {
        "uid" : {
          "type" : "string",
          "description" : "Unique id of object."
        },
        "href" : {
          "type" : "string",
          "description" : "Relative endpoint url of the corresponding object."
        }
      }
    },
    "Instance" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the Elastic Distributed Inference model."
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the instance."
        },
        "instances" : {
          "type" : "array",
          "description" : "The instance detail for an instance deamon.",
          "items" : {
            "$ref" : "#/definitions/Isd"
          }
        }
      }
    },
    "IaSTestResultParam" : {
      "type" : "object",
      "properties" : {
        "modelName" : {
          "type" : "string",
          "description" : "The name of inference model."
        },
        "reslove" : {
          "type" : "boolean",
          "description" : "Whether or not the inference result can be resolved."
        },
        "other" : {
          "type" : "string",
          "description" : "Return value for inference result can not be resolved."
        },
        "results" : {
          "type" : "array",
          "description" : "The result for the inference.",
          "items" : {
            "$ref" : "#/definitions/PredictResult"
          }
        }
      }
    },
    "ImageDetail" : {
      "type" : "object",
      "properties" : {
        "isusingtext" : {
          "type" : "boolean",
          "description" : "Whether using text or not."
        },
        "traintextpath" : {
          "type" : "string",
          "description" : "The train text path."
        },
        "valtextpath" : {
          "type" : "string",
          "description" : "The validation text path."
        },
        "testtextpath" : {
          "type" : "string",
          "description" : "The test text path."
        },
        "labeltextpath" : {
          "type" : "string",
          "description" : "The label text path."
        },
        "trainimagepath" : {
          "type" : "string",
          "description" : "The train image path."
        },
        "valimagepath" : {
          "type" : "string",
          "description" : "The validation image path."
        },
        "testimagepath" : {
          "type" : "string",
          "description" : "The test image path."
        },
        "imagetype" : {
          "type" : "string",
          "description" : "The image type."
        },
        "height" : {
          "type" : "integer",
          "description" : "The height of the image."
        },
        "width" : {
          "type" : "integer",
          "description" : "The width of the image."
        },
        "resizetransformation" : {
          "type" : "string",
          "description" : "The resize transformation."
        },
        "valpercentage" : {
          "type" : "integer",
          "description" : "The percentage for validation."
        },
        "testpercentage" : {
          "type" : "integer",
          "description" : "The percentage for test."
        },
        "splitalgorithm" : {
          "type" : "string",
          "example" : "hold-out",
          "description" : "The algorithm for splitting images."
        }
      }
    },
    "IaSTestInputParam" : {
      "type" : "object",
      "required" : [ "action_type", "data_type", "data_value" ],
      "properties" : {
        "action_type" : {
          "type" : "string",
          "description" : "The action type for the inference, including Classification, Object Detection."
        },
        "data_type" : {
          "type" : "string",
          "description" : "The data type for the inference, including image:raw_data, image:jpeg_uri"
        },
        "user" : {
          "type" : "string",
          "description" : "The usr who run the inference."
        },
        "attributes" : {
          "type" : "array",
          "description" : "The attributes for inference, for example threshold.",
          "items" : {
            "$ref" : "#/definitions/Attr"
          }
        },
        "data_value" : {
          "type" : "array",
          "description" : "Key-value for inference data.",
          "items" : {
            "$ref" : "#/definitions/Attr"
          }
        }
      }
    },
    "ResourceAllocation" : {
      "type" : "object",
      "properties" : {
        "service" : {
          "$ref" : "#/definitions/RAService"
        },
        "kernel" : {
          "$ref" : "#/definitions/RAKernel"
        }
      }
    },
    "ValidateParameters" : {
      "type" : "object",
      "properties" : {
        "valName" : {
          "type" : "string",
          "description" : "The deep learning validation name."
        },
        "sigId" : {
          "type" : "string",
          "description" : "Spark instance group ID."
        },
        "sigName" : {
          "type" : "string",
          "description" : "Spark instance group name."
        },
        "sigMasterUrl" : {
          "type" : "string",
          "description" : "URL of the Spark master for the Spark instance group."
        },
        "createTime" : {
          "type" : "string",
          "description" : "The time the validation was created."
        },
        "user" : {
          "type" : "string",
          "description" : "The user who created the validation."
        },
        "trainName" : {
          "type" : "string",
          "description" : "Name of the training to validate."
        },
        "metrics" : {
          "type" : "array",
          "description" : "The list of metrics.",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "HpoExperiment" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "description" : "Experiment id."
        },
        "state" : {
          "type" : "string",
          "description" : "Experiment state."
        },
        "metricVal" : {
          "type" : "number",
          "format" : "double",
          "description" : "metric value."
        },
        "metrics" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HpoMetric"
          }
        },
        "maxiteration" : {
          "type" : "integer",
          "description" : "maximum iteration."
        },
        "hyperParams" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/HpoHyperParameter"
          }
        },
        "appId" : {
          "type" : "string",
          "description" : "spark application Id."
        },
        "driverId" : {
          "type" : "string",
          "description" : "spark driver Id."
        },
        "startTime" : {
          "type" : "string",
          "description" : "The start time of experiment training."
        },
        "endTime" : {
          "type" : "string",
          "description" : "The end time of experiment training."
        }
      }
    },
    "algoDef" : {
      "type" : "object",
      "required" : [ "algorithm" ],
      "properties" : {
        "algorithm" : {
          "type" : "string",
          "description" : "The tuning algorithm. it can be build in algorithms like Random, Bayesian, Tpe, Hyperband and ExperimentGridSearch, or user installed algorithms."
        },
        "maxRunTime" : {
          "type" : "integer",
          "description" : "Max running time of the hpo task in munites, default -1(unlimited)."
        },
        "maxJobNum" : {
          "type" : "integer",
          "description" : "Max number of training job to submitted for hpo task, default -1(unlimited)."
        },
        "maxParalleJobNum" : {
          "type" : "integer",
          "description" : "Max number of training job to run in parallel, default 1."
        },
        "hyperbandEta" : {
          "type" : "number",
          "format" : "double",
          "description" : "hyperband eta value."
        },
        "objective" : {
          "type" : "string",
          "description" : "Optimize policy, one of minimize and maximize.",
          "enum" : [ "Maximize", "Minimize" ]
        },
        "algoParams" : {
          "type" : "array",
          "description" : "optional, additional algorithm parameters and it could be different for each algorithm.",
          "items" : {
            "$ref" : "#/definitions/algoParams"
          }
        }
      },
      "description" : "algorithm definition."
    },
    "DoubleSet" : {
      "type" : "array",
      "items" : {
        "type" : "number",
        "format" : "double"
      }
    },
    "Batch" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string",
          "description" : "Name of the user who started the task."
        },
        "sigName" : {
          "type" : "string",
          "description" : "Name of the Spark instance group."
        },
        "sigId" : {
          "type" : "string",
          "description" : "ID of the Spark instance group."
        },
        "id" : {
          "type" : "string",
          "description" : "ID of the batch."
        },
        "args" : {
          "type" : "string",
          "description" : "arguments to the tasks."
        },
        "submissionId" : {
          "type" : "string",
          "description" : "ID of the task."
        },
        "appId" : {
          "type" : "string",
          "description" : "ID of the application."
        },
        "masterURL" : {
          "type" : "string",
          "description" : "URL of the Spark."
        },
        "state" : {
          "type" : "string",
          "description" : "batch state."
        },
        "executionUserName" : {
          "type" : "string",
          "description" : "User name."
        }
      }
    },
    "TrainingParameters" : {
      "type" : "object",
      "properties" : {
        "sigId" : {
          "type" : "string",
          "description" : "The Spark instance group ID."
        },
        "sigName" : {
          "type" : "string",
          "description" : "The Spark instance group name."
        },
        "sigMasterUrl" : {
          "type" : "string",
          "description" : "The Spark instance group master URL."
        },
        "driverid" : {
          "type" : "string",
          "description" : "The Spark driver ID."
        },
        "cmd" : {
          "type" : "string",
          "description" : "The training command."
        },
        "trainName" : {
          "type" : "string",
          "description" : "The deep learning training name."
        },
        "dlFramework" : {
          "type" : "string",
          "example" : "TensorFlow",
          "description" : "The deep learning framework name."
        },
        "status" : {
          "type" : "string",
          "description" : "The training status."
        },
        "appid" : {
          "type" : "string",
          "description" : "The Spark application ID."
        },
        "appURL" : {
          "type" : "string",
          "description" : "The Spark application URL."
        },
        "wtURL" : {
          "type" : "string",
          "description" : "The training weight file URL."
        },
        "wfinit" : {
          "type" : "string",
          "description" : "The initial weight file for training."
        },
        "wtfolder" : {
          "type" : "string",
          "description" : "The training weight file folder name."
        },
        "gpuRatio" : {
          "type" : "integer",
          "description" : "The gpu ratio."
        },
        "createTime" : {
          "type" : "string",
          "description" : "The time the training task was created."
        },
        "user" : {
          "type" : "string",
          "description" : "The user who created the training task."
        },
        "clusterSize" : {
          "type" : "integer",
          "description" : "The number of workers in the cluster."
        },
        "testInterval" : {
          "type" : "integer",
          "description" : "Number of training runs that are run in a test interval. At each test interval the model is run against the test dataset to verify that the accuracy is enough."
        },
        "testIteration" : {
          "type" : "integer",
          "description" : "Number of times that the model runs against the test dataset in each interval. For example, if the test interval is set to 100 and the test iteration is set to 10, on the hundredth training run, the model will run against the test dataset 10 times."
        },
        "syncMode" : {
          "type" : "string",
          "description" : "The gradient synchronization mode in elastic distributed training. This parameter specifies whether the training is a synchronous or asynchronous.",
          "enum" : [ "SYNC", "ASYNC" ]
        },
        "progress" : {
          "type" : "integer",
          "description" : "The progress."
        },
        "historyServerUrl" : {
          "type" : "string",
          "description" : "The Spark history server URL."
        }
      }
    },
    "StringSet" : {
      "type" : "array",
      "items" : {
        "type" : "string"
      }
    },
    "Isd" : {
      "type" : "object",
      "properties" : {
        "isd_uid" : {
          "type" : "string",
          "description" : "The uid of the instance."
        },
        "client_number" : {
          "type" : "integer",
          "description" : "The number of the instance client."
        },
        "pending_number" : {
          "type" : "integer",
          "description" : "The number of the pending instance."
        },
        "request_per_sec" : {
          "type" : "integer",
          "description" : "The number of request dealing with per second."
        },
        "data_size_per_sec" : {
          "type" : "integer",
          "description" : "The size of data dealing with per second."
        },
        "isd_container" : {
          "type" : "array",
          "description" : "The container detail for an instance deamon.",
          "items" : {
            "$ref" : "#/definitions/Container"
          }
        }
      }
    },
    "HyperParameter" : {
      "type" : "object",
      "properties" : {
        "learningrate" : {
          "type" : "number",
          "format" : "float",
          "description" : "The learning rate hyperparameter."
        },
        "momentum" : {
          "type" : "number",
          "format" : "float",
          "description" : "The momentum hyperparameter."
        },
        "weightdecay" : {
          "type" : "number",
          "format" : "float",
          "description" : "The Caffe and PyTorch weight decay hyperparameter."
        },
        "decayrate" : {
          "type" : "number",
          "format" : "float",
          "description" : "The TensorFlow learning rate decay hyperparameter."
        },
        "decaysteps" : {
          "type" : "number",
          "format" : "integer",
          "description" : "The TensorFlow decaysteps hyperparameter."
        },
        "staircase" : {
          "type" : "string",
          "description" : "The TensorFlow staircase hyperparameter."
        },
        "maxiteration" : {
          "type" : "integer",
          "description" : "The Caffe and TensorFlow maximum iteration hyperparameter."
        },
        "epoch" : {
          "type" : "integer",
          "description" : "The PyTorch maximum iteration hyperparameter."
        },
        "solvertype" : {
          "type" : "string",
          "example" : "AdaDelta",
          "description" : "The solver or optimizer type hyperparameter. \"Cf\" marks a valid parameter for Caffe, \"TF\" for TensorFlow, \"PT\" for PyTorch.",
          "enum" : [ "AdaGrad (Cf)", "AdaDelta (Cf)", "Adam (Cf, TF and PT)", "Momentum (TF)", "RMSProp (Cf, TF and PT)", "SGD (Cf and PT)", "ASGD (PT)", "Nesterov (Cf)", "GradientDescent (TF)", "Adadelta (TF and PT)", "Adagrad (TF and PT)", "AdagradDA (TF)", "Ftrl (TF)", "SparseAdam (PT)", "Adamax (PT)", "Rprop (PT)", "ProximalGradientDescent (TF)", "ProximalAdagrad (TF)" ]
        },
        "lrpolicy" : {
          "type" : "string",
          "example" : "multistep",
          "description" : "The learning rate policy. \"Cf\" marks a valid parameter for Caffe, and \"TF\" for TensorFlow.",
          "enum" : [ "fixed (Cf, TF and PT)", "step (Cf and PT)", "multistep (Cf and PT)", "exp (Cf)", "inv (Cf)", "poly (Cf)", "sigmoid (Cf)", "exponential (TF and PT)", "inversetime (TF)", "naturalexp (TF)", "piecewise (TF)", "polynomial (TF)", "cosineannealing (PT)", "reducelronplateau (PT)" ]
        },
        "stepsize" : {
          "type" : "integer",
          "description" : "The Caffe and PyTorch model stepsize hyperparameter."
        },
        "stepvalues" : {
          "type" : "string",
          "example" : "2000,4000,6000",
          "description" : "The Caffe model stepvalue hyperparameter, a list of step values separated by comma."
        },
        "gamma" : {
          "type" : "number",
          "format" : "double",
          "description" : "The Caffe and PyTorch model gamma hyperparameter."
        },
        "power" : {
          "type" : "number",
          "format" : "double",
          "description" : "The Caffe and TensorFlow model power hyperparameter."
        },
        "cycle" : {
          "type" : "boolean",
          "description" : "The TensorFlow model power hyperparameter."
        },
        "hiddenstatesize" : {
          "type" : "integer",
          "description" : "The TensorFlow LSTM model hidden state size hyperparameter."
        },
        "optdecay" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model optdecay hyperparameter."
        },
        "epsilon" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow and PyTorch model epsilon hyperparameter."
        },
        "accumulator" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow and PyTorch model accumulator hyperparameter."
        },
        "l1_regularization" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model l1_regularization hyperparameter."
        },
        "l2_regularization" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model l2_regularization hyperparameter."
        },
        "beta1" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model beta1 hyperparameter."
        },
        "beta2" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model beta2 hyperparameter."
        },
        "lr_power" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model lr_power hyperparameter."
        },
        "end_learning_rate" : {
          "type" : "number",
          "format" : "double",
          "description" : "The TensorFlow model end_learning_rate hyperparameter."
        },
        "rho" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model rho hyperparameter."
        },
        "lr_decay" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model lr_decay hyperparameter."
        },
        "amsgrad" : {
          "type" : "boolean",
          "description" : "The PyTorch model amsgrad hyperparameter."
        },
        "lambd" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model lambd hyperparameter."
        },
        "alpha" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model alpha hyperparameter."
        },
        "t0" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model t0 hyperparameter."
        },
        "centered" : {
          "type" : "boolean",
          "description" : "The PyTorch model centered hyperparameter."
        },
        "dampening" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model dampening hyperparameter."
        },
        "nesterov" : {
          "type" : "boolean",
          "description" : "The PyTorch model nesterov hyperparameter."
        },
        "t_max" : {
          "type" : "integer",
          "description" : "The PyTorch model t_max hyperparameter."
        },
        "eta_min" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model eta_min hyperparameter."
        },
        "mode" : {
          "type" : "string",
          "description" : "The PyTorch model mode hyperparameter, value is one of min, max."
        },
        "factor" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model factor hyperparameter."
        },
        "patience" : {
          "type" : "integer",
          "description" : "The PyTorch model patience hyperparameter."
        },
        "threshold" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model threshold hyperparameter."
        },
        "threshold_mode" : {
          "type" : "string",
          "description" : "The PyTorch model threshold_mode hyperparameter, value is one of rel, abs."
        },
        "cooldown" : {
          "type" : "integer",
          "description" : "The PyTorch model cooldown hyperparameter."
        },
        "eps" : {
          "type" : "number",
          "format" : "double",
          "description" : "The PyTorch model eps hyperparameter."
        }
      }
    },
    "DLFramework" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the deep learning framework."
        },
        "desc" : {
          "type" : "array",
          "description" : "Description of the deep learning framework.",
          "items" : {
            "type" : "string"
          }
        },
        "frameworkVersion" : {
          "type" : "string",
          "description" : "The framework version."
        },
        "distributeStrategy" : {
          "type" : "string",
          "description" : "The distributed strategies.",
          "enum" : [ "MultiWorkerMirroredStrategy", "ParameterServerStrategy" ]
        },
        "description" : {
          "type" : "string",
          "description" : "Description."
        },
        "numPs" : {
          "type" : "integer",
          "description" : "Number of parameter server workers"
        }
      }
    },
    "HpoTaskInput" : {
      "type" : "object",
      "required" : [ "algoDef", "hpoName", "modelName", "resDef" ],
      "properties" : {
        "modelName" : {
          "type" : "string",
          "description" : "The deep learning model name."
        },
        "hpoName" : {
          "type" : "string",
          "description" : "The deep learning tuning name."
        },
        "hyperParams" : {
          "type" : "array",
          "description" : "The deep learning tuning hyperparameters.",
          "items" : {
            "$ref" : "#/definitions/HpoHyperParameter"
          }
        },
        "resDef" : {
          "$ref" : "#/definitions/resDef"
        },
        "algoDef" : {
          "$ref" : "#/definitions/algoDef"
        },
        "experiments" : {
          "type" : "array",
          "description" : "Only valid for ExperimentGridSearch algorithm which will submit train with this list of experiments.",
          "items" : {
            "$ref" : "#/definitions/searchExperiment"
          }
        }
      }
    },
    "ExecutorDetail" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The Spark executor ID."
        },
        "containerid" : {
          "type" : "string",
          "description" : "The resource orchestrator activity ID that starts the Spark executors."
        },
        "state" : {
          "type" : "string",
          "description" : "The Spark executor state."
        },
        "host" : {
          "type" : "string",
          "description" : "The host on which the Spark executors run."
        },
        "coresused" : {
          "type" : "number",
          "format" : "double",
          "description" : "The number of CPU cores that are allocated."
        },
        "memused" : {
          "type" : "number",
          "format" : "double",
          "description" : "The amount of memory, in MB, that is used by the executors."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time-stamp of the updated Spark executors."
        },
        "executorstdout" : {
          "type" : "string",
          "description" : "The path to the Spark executors stdout log."
        },
        "executorstderr" : {
          "type" : "string",
          "description" : "The path to the Spark executors stderr log."
        }
      }
    },
    "HpoHyperParameter" : {
      "type" : "object",
      "required" : [ "dataType", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Hyperparameter name, the same name will be used in the config.json so user model can load it."
        },
        "type" : {
          "type" : "string",
          "description" : "One of Range, Discrete, Fix.",
          "enum" : [ "range", "discrete", "fix" ]
        },
        "dataType" : {
          "type" : "string",
          "description" : "One of int, double, str.",
          "enum" : [ "int", "double", "str" ]
        },
        "minDbVal" : {
          "type" : "number",
          "format" : "double",
          "description" : "Minimal double value if type=Range and datatype=double."
        },
        "maxDbVal" : {
          "type" : "number",
          "format" : "double",
          "description" : "Maximal double value if type=Range and datatype=double."
        },
        "minIntVal" : {
          "type" : "integer",
          "description" : "Minimal int value if type=Range and datatype=int."
        },
        "maxIntVal" : {
          "type" : "integer",
          "description" : "Maximal int value if type=Range and datatype=int."
        },
        "discreteDbVal" : {
          "type" : "array",
          "description" : "Double list like [0.1,0.2] if type=Discreate and datatype=double.",
          "items" : {
            "type" : "number",
            "format" : "double"
          }
        },
        "discreteIntVal" : {
          "type" : "array",
          "description" : "Int list like [1,2] if type=Discreate and datatype=int.",
          "items" : {
            "type" : "integer"
          }
        },
        "discreateStrVal" : {
          "type" : "array",
          "description" : "str list like ['1','2'] if type=Discreate and datatype=double.",
          "items" : {
            "type" : "string"
          }
        },
        "userDefined" : {
          "type" : "boolean",
          "description" : "whether is user defined parameter."
        },
        "fixedVal" : {
          "type" : "string",
          "description" : "fixed hyperparameter."
        },
        "step" : {
          "type" : "string",
          "description" : "A number value in string format, step size to split the Range space. ONLY valid when type is Range."
        },
        "power" : {
          "type" : "string",
          "description" : "A number value in string format, the base value for power calculation. ONLY valid when type is Range."
        }
      }
    },
    "Envs" : {
      "type" : "object",
      "required" : [ "name", "value" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name."
        },
        "value" : {
          "type" : "string",
          "description" : "The value."
        }
      }
    },
    "IaSProfileParam" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name for Elastic Distributed Inference model."
        },
        "create_time" : {
          "type" : "string",
          "description" : "The create time for Elastic Distributed Inference model."
        },
        "update_time" : {
          "type" : "string",
          "description" : "The update time for Elastic Distributed Inference model."
        },
        "replica" : {
          "type" : "integer",
          "description" : "The replication number for inference model instance."
        },
        "type" : {
          "type" : "string",
          "description" : "The type for Elastic Distributed Inference model."
        },
        "schema_version" : {
          "type" : "string",
          "description" : "The schema version for Elastic Distributed Inference model."
        },
        "policy" : {
          "$ref" : "#/definitions/Policy"
        },
        "kernel" : {
          "$ref" : "#/definitions/Kernel"
        },
        "resource_allocation" : {
          "$ref" : "#/definitions/ResourceAllocation"
        },
        "envs" : {
          "type" : "array",
          "description" : "Additional environment variables to run model kernel.",
          "items" : {
            "$ref" : "#/definitions/Envs"
          }
        }
      }
    },
    "DriverDetail" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The Spark drivers ID."
        },
        "containerid" : {
          "type" : "string",
          "description" : "The resource orchestrator activity ID that starts the Spark drivers."
        },
        "state" : {
          "type" : "string",
          "description" : "The Spark drivers state."
        },
        "host" : {
          "type" : "string",
          "description" : "The host on which the Spark drivers run."
        },
        "coresused" : {
          "type" : "number",
          "format" : "double",
          "description" : "The number of CPU cores allocated."
        },
        "memused" : {
          "type" : "number",
          "format" : "double",
          "description" : "The amount of memory, in MB that is used by the Spark drivers."
        },
        "timestamp" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "The time-stamp of the updated Spark drivers."
        },
        "driverstdout" : {
          "type" : "string",
          "description" : "The path to the Spark drivers stdout log."
        },
        "driverstderr" : {
          "type" : "string",
          "description" : "The path to the Spark drivers stderr log."
        }
      }
    },
    "HpoTaskState" : {
      "type" : "object",
      "properties" : {
        "hpoName" : {
          "type" : "string",
          "description" : "The name of hyperparameter optimization(HPO) task."
        },
        "state" : {
          "type" : "string",
          "description" : "The state of HPO task."
        },
        "progress" : {
          "type" : "string",
          "description" : "The progress of HPO task."
        },
        "duration" : {
          "type" : "string",
          "description" : "The duration of HPO task."
        },
        "creator" : {
          "type" : "string",
          "description" : "The creator of HPO task."
        },
        "createtime" : {
          "type" : "string",
          "description" : "The create time of HPO task."
        },
        "best" : {
          "description" : "The best hyper parameters of HPO",
          "$ref" : "#/definitions/HpoExperiment"
        },
        "experiments" : {
          "type" : "array",
          "description" : "All experiments of HPO.",
          "items" : {
            "$ref" : "#/definitions/HpoExperiment"
          }
        }
      }
    },
    "ModelTemplateCreateParam" : {
      "type" : "object",
      "required" : [ "framework", "name", "path" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the model template."
        },
        "path" : {
          "type" : "string",
          "description" : "The path of the model template."
        },
        "description" : {
          "type" : "string",
          "description" : "The description."
        },
        "framework" : {
          "type" : "string",
          "example" : "Caffe",
          "description" : "The deep learning framework.",
          "enum" : [ "Caffe", "TensorFlow", "PyTorch" ]
        },
        "frameworkVersion" : {
          "type" : "string",
          "description" : "The framework version."
        }
      }
    },
    "ModelTemplateDetail" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the model template."
        },
        "path" : {
          "type" : "string",
          "description" : "The path of the model template."
        },
        "description" : {
          "type" : "string",
          "description" : "The description."
        },
        "hyperparameter" : {
          "$ref" : "#/definitions/HyperParameter"
        },
        "framework" : {
          "type" : "string",
          "example" : "TensorFlow",
          "description" : "The deep learning framework name."
        },
        "solverprototxtpath" : {
          "type" : "string",
          "description" : "The path to Caffe *solver.prototxt configuration file."
        },
        "traintestprototxtpath" : {
          "type" : "string",
          "description" : "The path to Caffe *train_test.prototxt configuration file."
        },
        "inferenceprototxtpath" : {
          "type" : "string",
          "description" : "The path to inference prototxt configuration file."
        },
        "solverContent" : {
          "type" : "string",
          "description" : "The solverContent."
        },
        "trainTestContent" : {
          "type" : "string",
          "description" : "The trainTestContent."
        },
        "inferenceContent" : {
          "type" : "string",
          "description" : "The inferenceContent."
        },
        "tfmainpath" : {
          "type" : "string",
          "description" : "The main executor file path."
        },
        "tfmainContent" : {
          "type" : "string",
          "description" : "The contents of the main.py."
        },
        "frameworkVersion" : {
          "type" : "string",
          "description" : "The framework version."
        }
      }
    },
    "IaSReadmeParam" : {
      "type" : "object",
      "properties" : {
        "readme" : {
          "type" : "string",
          "description" : "The readme for Elastic Distributed Inference model."
        }
      }
    },
    "PredictParameters" : {
      "type" : "object",
      "properties" : {
        "predictItem" : {
          "type" : "string",
          "description" : "Prediction item."
        },
        "predictResults" : {
          "$ref" : "#/definitions/PredictParams"
        }
      }
    },
    "ClassificationDetResult" : {
      "type" : "object",
      "properties" : {
        "label" : {
          "type" : "string",
          "description" : "The label."
        },
        "prob" : {
          "type" : "number",
          "format" : "double",
          "description" : "The probability that there is an object in the grid cell."
        },
        "bbox" : {
          "type" : "string",
          "description" : "The bounding box to describe the target location."
        }
      }
    },
    "csvDetail" : {
      "type" : "object",
      "properties" : {
        "columns" : {
          "type" : "array",
          "description" : "A list of the column name.",
          "items" : {
            "type" : "string"
          }
        },
        "index" : {
          "type" : "array",
          "description" : "A list of the index.",
          "items" : {
            "type" : "string"
          }
        },
        "data" : {
          "type" : "array",
          "description" : "The data.",
          "items" : {
            "$ref" : "#/definitions/DoubleSet"
          }
        },
        "JSONString" : {
          "type" : "string",
          "description" : "The Json string of the csv data."
        }
      }
    },
    "SigAppInstanceDetail" : {
      "type" : "object",
      "properties" : {
        "uuid" : {
          "type" : "string",
          "description" : "The unique ID of the Spark instance group."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the Spark instance group."
        },
        "version" : {
          "type" : "string",
          "description" : "The Spark version of the Spark instance group."
        },
        "masterUrl" : {
          "type" : "string",
          "description" : "The URL of the Spark instance group master."
        },
        "executionUser" : {
          "type" : "string",
          "description" : "The execution user of the Spark instance group."
        },
        "state" : {
          "type" : "string",
          "description" : "The state of the Spark instance group."
        },
        "historyServerUrl" : {
          "type" : "string",
          "description" : "The Spark history server URL."
        }
      }
    }
  },
  "paths" : {
    "/platform/rest/deeplearning/v1/conf" : {
      "get" : {
        "tags" : [ "Configuration" ],
        "summary" : "Retrieves all dlpd configuration parameters",
        "description" : "Returns all properties that are defined in $EGO_CONFDIR/../../dli/conf/dlpd/dlpd.conf.",
        "operationId" : "getDeepLearningConf",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains a dictionary of key-value string pairs that is defined in the dlpd.conf file.",
            "schema" : {
              "$ref" : "#/definitions/StringMap"
            }
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/datasets" : {
      "get" : {
        "tags" : [ "Datasets" ],
        "summary" : "Retrieves all deep learning datasets",
        "description" : "Returns full listing of all the datasets defined in the system.",
        "operationId" : "getFullDatasetDetails",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting deep learning datasets.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning datasets.",
              "items" : {
                "$ref" : "#/definitions/DatasetDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "Datasets" ],
        "summary" : "Creates a new deep learning dataset",
        "description" : "A dataset can be created in the following ways - 1) Import the existing LMDB, TFRecords, or Other dataset; 2) Create a LMDB or TFRecords dataset from existing image files for image classification; 3) Import images for object detection; 4) Import a CVS dataset; 5) Import images for vector output; 6) Import plugin dataset including customized plugins and the ready-made NLP plugin; 7) Raw data.",
        "operationId" : "addDataset",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "datasetInfo",
          "description" : "The information that specifies the details to create a new dataset.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatasetCreateParam"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The deep learning dataset created successfully."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/datasets/{datasetname}" : {
      "get" : {
        "tags" : [ "Datasets" ],
        "summary" : "Retrieves a deep learning dataset by its name",
        "description" : "Retrieves a deep learning dataset by its name.",
        "operationId" : "getDatasetInfo",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "datasetname",
          "in" : "path",
          "description" : "The deep learning dataset name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting deep learning dataset.",
            "schema" : {
              "$ref" : "#/definitions/DatasetDetail"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "Datasets" ],
        "summary" : "Deletes a deep learning dataset",
        "description" : "Deletes a deep learning dataset.",
        "operationId" : "deleteDatasetInfo",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "datasetname",
          "in" : "path",
          "description" : "The deep learning dataset name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the deep learning dataset."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/datasets/{datasetname}/csvs" : {
      "get" : {
        "tags" : [ "Datasets" ],
        "summary" : "Retrieve required dataset CSV data",
        "description" : "Retrieve required dataset CSV data.",
        "operationId" : "csvList",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "datasetname",
          "in" : "path",
          "description" : "The dataset name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of CSV data to review, for example - validation, test or training.",
          "required" : true,
          "type" : "string",
          "enum" : [ "Train", "Test", "Val" ]
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "You can request a specific range of results by specifying the start index of the data and the length of the data.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "length",
          "in" : "query",
          "description" : "You can request a specific range of results by specifying the start index of the data and the length of the data.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the subset of the CSV dataset either for training, testing or validation.",
            "schema" : {
              "$ref" : "#/definitions/csvDetail"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/datasets/{datasetname}/objectimages" : {
      "get" : {
        "tags" : [ "Datasets" ],
        "summary" : "Retrieves required object images",
        "description" : "Retrieves required object images.",
        "operationId" : "objectimageList",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "datasetname",
          "in" : "path",
          "description" : "The dataset name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of image data to review, for example - validation, test or training.",
          "required" : true,
          "type" : "string",
          "enum" : [ "Train", "Val", "Test" ]
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "You can request a specific range of results by specifying the start index of the data and the length of the data.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "length",
          "in" : "query",
          "description" : "You can request a specific range of results by specifying the start index of the data and the length of the data.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the subset of the image dataset for training, testing or validation.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning dataset images.",
              "items" : {
                "$ref" : "#/definitions/Pictures"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/datasets/{datasetname}/stop" : {
      "put" : {
        "tags" : [ "Datasets" ],
        "summary" : "Stops a dataset task",
        "description" : "Stops a running dataset task.",
        "operationId" : "stopDataSet",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "datasetname",
          "in" : "path",
          "description" : "The dataset name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stopped the running job."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels" : {
      "get" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Retrieves all elastic distributed inference services defined in the system",
        "description" : "Returns full listing of all the elastic distributed inference services defined in the system.",
        "operationId" : "getEDIModels",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting elastic distributed inference services.",
            "schema" : {
              "type" : "array",
              "description" : "A list of elastic distributed inference services.",
              "items" : {
                "$ref" : "#/definitions/IaSModelDescription"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/new" : {
      "post" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Create a new elastic distributed inference service.",
        "description" : "Create a new elastic distributed inference service.",
        "operationId" : "newEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "IaSParameters",
          "description" : "Parameters required to create a new elastic distributed inference service.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IaSParam"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully create elastic distributed inference service."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}" : {
      "get" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Retrieves detail for a elastic distributed inference service",
        "description" : "Returns full details for a elastic distributed inference service.",
        "operationId" : "getEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting elastic distributed inference service.",
            "schema" : {
              "$ref" : "#/definitions/IaSModelDescription"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Publish a new elastic distributed inference service from the DLI inference model.",
        "description" : "Publish a new elastic distributed inference service from the DLI inference model.",
        "operationId" : "publishEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The name of deep learning model, which will be published to Elastic Distributed Inference service.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "IaSParameters",
          "description" : "Parameters required to publish a new elastic distributed inference service.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IaSParam"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully publish elastic distributed inference service."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "put" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Update elastic distributed inference service.",
        "description" : "Update elastic distributed inference service.",
        "operationId" : "updateEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "IaSModelParameters",
          "description" : "Parameters required to update app profile of an elastic distributed inference service.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IaSModelDescription"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully update elastic distributed inference service."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Deletes an elastic distributed inference service",
        "description" : "Deletes an elastic distributed inference service.",
        "operationId" : "deleteEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference model service.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok. Successfully deleted the elastic distributed inference service."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/appprofile" : {
      "get" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Retrieves detail for app profile of an elastic distributed inference service",
        "description" : "Returns full details for app profile of an elastic distributed inference service.",
        "operationId" : "getEDIModelPorfile",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting app profile of elastic distributed inference service.",
            "schema" : {
              "$ref" : "#/definitions/IaSProfileParam"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "put" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Update app profile of an elastic distributed inference service.",
        "description" : "Update app profile of an elastic distributed inference service.",
        "operationId" : "updateEDIModelPorfile",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "IaSProfileParameters",
          "description" : "Parameters required to update app profile of an elastic distributed inference service.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IaSProfileParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully update app profile of elastic distributed inference service."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/inference" : {
      "post" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Do inference using an elastic distributed inference service",
        "description" : "Do inference using an elastic distributed inference service.",
        "operationId" : "doEDIInference",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "IaSTestInputParameters",
          "description" : "Parameters required to update app profile of an elastic distributed inference service.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/IaSTestInputParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the result of inference.",
            "schema" : {
              "$ref" : "#/definitions/IaSTestResultParam"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/instance" : {
      "get" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Retrieves detail for instance of an elastic distributed inference service",
        "description" : "Returns full details for instance of an elastic distributed inference service.",
        "operationId" : "getEDIModelInstance",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting instance of elastic distributed inference service.",
            "schema" : {
              "$ref" : "#/definitions/IaSInstanceParam"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/operation/start" : {
      "put" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Start an elastic distributed inference service",
        "description" : "Start an elastic distributed inference service.",
        "operationId" : "startEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok. Successfully started the elastic distributed inference service."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/operation/stop" : {
      "put" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Stop an elastic distributed inference service",
        "description" : "Stop an elastic distributed inference service.",
        "operationId" : "stopEDIModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok. Successfully stopped the elastic distributed inference service."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/readme" : {
      "get" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Retrieves readme of an elastic distributed inference service",
        "description" : "Returns readme of an elastic distributed inference service.",
        "operationId" : "getEDIModelReadme",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference service name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting readme of elastic distributed inference service.",
            "schema" : {
              "$ref" : "#/definitions/IaSReadmeParam"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/edimodels/{modelname}/streaming" : {
      "get" : {
        "tags" : [ "ElasticDistributedInference" ],
        "summary" : "Retrieves streaming uri for the elastic distributed inference service",
        "description" : "Retrieves streaming uri for the elastic distributed inference service",
        "operationId" : "getEDIModelStreaming",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The elastic distributed inference services name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting of streaming uri.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/execs" : {
      "get" : {
        "tags" : [ "Execute" ],
        "summary" : "Retrieves all tasks started through Execute",
        "description" : "Retrieves all tasks started through Execute",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the tasks.",
            "schema" : {
              "type" : "array",
              "description" : "A list of task details.",
              "items" : {
                "$ref" : "#/definitions/Batch"
              }
            }
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "Execute" ],
        "summary" : "Starts a task through Execute",
        "description" : "Starts a task through Execute",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sigName",
          "in" : "query",
          "description" : "The Spark instance group in which to start the task",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "args",
          "in" : "query",
          "description" : "Arguments to the task. These arguments can be found in the command line interface. They can be model specific arguments. Examples are \"--exec-start tensorflow --model-main TF_mnist.py\", \"--exec-start PyTorch --model-main PyTorch_mnist.py --batch-size 200\"",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "file",
          "in" : "formData",
          "description" : "If the model consists of one file then specify that file. If the model consists of a directory, then it's the tar of the directory with suffix \".modelDir.tar\"",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful task creation"
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "Execute" ],
        "summary" : "Deletes all tasks started by the current users.",
        "description" : "Delete all tasks",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Ok. Successfully deleted all tasks."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/execs/frameworks" : {
      "get" : {
        "tags" : [ "Execute" ],
        "summary" : "Retrieves all deep learning framework plugins",
        "description" : "Retrieves all deep learning framework plugins",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains all deep learning framework plugins. Framework plugin names are used to start a task.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning framework details.",
              "items" : {
                "$ref" : "#/definitions/DLFramework"
              }
            }
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/execs/{execId}" : {
      "get" : {
        "tags" : [ "Execute" ],
        "summary" : "Retrieves a task started through Execute",
        "description" : "Retrieves a task started through Execute. The returned values 'sigId', 'submissionId' can be used to make other Conductor REST calls to get additional task details.",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "execId",
          "in" : "path",
          "description" : "ID of task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the task.",
            "schema" : {
              "$ref" : "#/definitions/Batch"
            }
          },
          "400" : {
            "description" : "Cannot find task with given execId."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "Execute" ],
        "summary" : "Deletes a task started through Execute",
        "description" : "Deletes a task",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "execId",
          "in" : "path",
          "description" : "ID of task",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Ok. Successfully deleted the task."
          },
          "400" : {
            "description" : "Cannot find task with given execId."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/execs/{execId}/log" : {
      "get" : {
        "tags" : [ "Execute" ],
        "summary" : "Retrieve logs of the training task by execution ID.",
        "description" : "Retrieve logs of the training task by execution ID.",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "execId",
          "in" : "path",
          "description" : "Execution ID of the training task.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the logs of this training task.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Cannot find task with the given execId."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/execs/{execId}/result" : {
      "get" : {
        "tags" : [ "Execute" ],
        "summary" : "Retrieve the result of the training task using an execution ID.",
        "description" : "Retrieve the result of the training task using an execution ID.",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "execId",
          "in" : "path",
          "description" : "Execution ID of the training task.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the trained model of the training task. Returned as a zip file.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Cannot find task with the given execId."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/execs/{execId}/stop" : {
      "post" : {
        "tags" : [ "Execute" ],
        "summary" : "Stop the training task by execution ID.",
        "description" : "Stop the training task by execution ID.",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "execId",
          "in" : "path",
          "description" : "Execution ID of the training task.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully stopped the tasks."
          },
          "400" : {
            "description" : "Cannot find task with the given execId."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/frameworks" : {
      "get" : {
        "tags" : [ "Frameworks" ],
        "summary" : "Retrieves details for all defined frameworks",
        "description" : "Returns the configuration information for all deep learning framework or a specified deep learning framework.",
        "operationId" : "getDeepLearningFrameworks",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "backend",
          "in" : "query",
          "description" : "Filter deep learning frameworks by the backend framework name.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Caffe", "TensorFlow", "PyTorch" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting framework information.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning framework configuration details.",
              "items" : {
                "$ref" : "#/definitions/FrameworkDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/frameworks/all" : {
      "get" : {
        "tags" : [ "Frameworks" ],
        "summary" : "Retrieves training engine name for all defined frameworks",
        "description" : "Returns training engine name for all deep learning framework.",
        "operationId" : "getAllDeepLearningFrameworks",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting framework information.",
            "schema" : {
              "type" : "array",
              "description" : "A list of training engine name for all deep learning framework configuration details.",
              "items" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/hypersearch" : {
      "get" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Retrieve all hpo tasks.",
        "description" : "Get all the hpo tasks that the login user can access.",
        "operationId" : "getAllHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting hpo tasks.",
            "schema" : {
              "type" : "array",
              "description" : "A list of hpo tasks.",
              "items" : {
                "$ref" : "#/definitions/HpoTaskState"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Start a new hpo task",
        "description" : "Start a new hpo task by providing sample images as well as other required parameters.\n\nTo start a hpo task, we need string format of input parameters, which is python dict or json format as below:\n\n## data sepcification:\n```\n{\n   'hpoName': 'optional, string, name/id for the hpo task, will generate one if none specified here.',\n   'modelSpec': \n   {\n       'sigName': 'required, string, same as BYOF training',\n       'args': 'required, string, same as BYOF training'\n   },\n   'algoDef':\n   { \n       'algorithm': 'required, string, it can be build in algorithms like Random, Bayesian, Tpe, Hyperband and ExperimentGridSearch, or user installed algorithms',\n       'maxRunTime': 'optional, int, max running time of the hpo task in minutes, default -1(unlimited)',\n       'maxJobNum': 'optional, int, max number of training job to submitted for hpo task, default -1(unlimited)',\n       'maxParalleJob': 'optinal, int, max number of training job to run in parallel, default 1',\n       'objectiveMetric': 'required, string, name of metric will be optimized, same one in the val_dict_list.json',\n       'objective': 'required, string, optimize policy, one of minimize, maximize',\n       'additionalMetrics': 'optional, dict like {'metric_name': 'metric strategy'}, where metric stragety can be one of minimize, maximize, latest. latest will be used as the strategy if other names than those three is specified.',\n       'algoParams': 'optional, list like [{'name':'', value:''}], additional algorithm parameters and it could be different for each algorithm which will be covered in later part'\n   },\n   'hyperParams':\n   [\n       {\n           'name': 'required, string, hyperparameter name, the same name will be used in the config.json so user model can load it',\n           'type': 'required, string, one of Range, Discrete',\n           'dataType': 'required, string, one of int, double, str',\n           'minDbVal': 'double, required if type=Range and datatype=double',\n           'maxDbVal': 'double, required if type=Range and datatype=double',\n           'minIntVal': 'int, required if type=Range and datatype=int',\n           'maxIntVal': 'int, required if type=Range and datatype=int',\n           'discreteDbVal': 'double, list like [0.1, 0.2], required if type=Discrete and dataType=double',\n           'discreteIntVal': 'int, list like [1, 2], required if type=Discrete and datatype=int',\n           'discreateStrVal': 'string, list like ['1', '2'], required if type=Discrete and datatype=str',\n           'power': 'a number value in string format, the base value for power calculation. ONLY valid when type is Range',\n           'step': 'a number value in string format, step size to split the Range space. ONLY valid when type is Range'\n       }\n   ],\n   'experiments':\n   [\n       {\n          'id': 'required, int, hyperparameter experiment id',\n          'hyperParams':\n          [\n              {\n                  'name': 'required, string, hyperparameter name, the same name will be used in the config.json so user model can load it',\n                  'dataType': 'required, string, one of int, double, str',\n                  'fixedVal': 'required, the same type with datatype specified, if dataTye=double, need fixedVal type doulbe'\n              }\n          ]\n       }\n    ]\n}\n``` \nEach new hpo task request could only choose one from `hyperParams` and `experiments`, for search algorithm ExperimentGridSearch, only `experiments` is supported, for other algorithms, only `hyperParams` is supported: \n\nFor Random, `algoParams` can be provided as this:\n```\n'algoParams':\n[\n    {\n        'name': 'RandomSeed',\n        'value': 'Optional, string, the random seed used to propose hyperparameter combinations.'\n    }\n]\n```\nFor Hyperband, `algoParams` can be provided as this:\n```\n'algoParams':\n[\n    {\n        'name': 'RandomSeed',\n        'value': 'Optional, string, the random seed used by Hyperband to propose hyperparameter combinations in the first rung of brackets.'\n    },\n    {\n        'name': 'eta',\n        'value': 'Optional, string, the reduction factor to control the proportion of configurations discarded in each Hyperband brackets. Default 3.'            \n    },\n    {\n        'name': 'ResourceName',\n        'value': 'Required, string, the parameter name that will be taken as resource in Hyperband, normally training epochs or iterations. User can get this parameter from config.json just like other hyper-parameters.'\n    },\n    {\n        'name': 'ResourceValue',\n        'value': 'Required, int value in string format, it is the corresponding upper limited value for the ResourceName.'\n    }\n]\n```\nFor Tpe, `algoParams` can be provided as this:\n```\n'algoParams':\n[\n    {\n        'name': 'RandomSeed',\n        'value': ''Optional, string, the random seed used for the initial warm up hyperparameter combinations and the random generator of Gaussian Mixture Model.'\n    },\n    {\n        'name': 'WarmUp',\n        'value': 'Optional, string, the number of initial warm up hyperparameter combinations. It should be bigger than 2. If maxJobNum is smaller than this value, maxJobNum will be taken as the value. Default 20.'\n    },\n    {\n        'name': 'EICandidate',\n        'value': 'Optional, string, the number of hyperparameter combinations proposed each round as the candidates for Expected Improvement to propose the final one hyperparameter combination. It should be bigger than 1. Default 24.'\n    },\n    {\n        'name': 'GoodRatio',\n        'value': 'Optional, string, the fraction to use as good hyperparameter combinations from previous completed experiment training to build the good Gaussian Mixture Model. It should be bigger than 0. Default 0.25.'\n    },\n    {\n        'name': 'GoodMax',\n        'value': 'Optional, string, the max number of good hyperparameter combinations from previous completed experiment training to build the good Gaussian Mixture Model. It should be bigger than 1. Default 25.'\n    }\n]\n```\nFor Bayesian, `algoParams` can be provided as this:\n```\n'algoParams':\n[\n    {\n        'name': 'RandomSeed',\n        'value': 'Optional, string, the random seed used by Bayesian. If not given, HPO will generate a random RandomSeed.'\n    },\n    {\n        'name': 'InitPoints',\n        'value': 'Optional, string, number of random search before approximating with Bayesian algorithm. Default 10.'\n    },\n    {\n        'name': 'CubeSize',\n        'value': 'Optional, string, the Bayesian candidate size. The value of CubeSize should not be smaller than the max maxJobNum. If maxJobNum=-1, CubeSize is max(10000, CubeSize), otherwise the default cubSize is maxJobNum*100. '\n    },\n    {\n        'name': 'Noiseless',\n        'value': 'Optional, string, specify whether the bayesian sampling will disable noise or not. If your model is entirely deterministic (e.g. analytic), then specify it true to speed up the optimization. If your model is not deterministic (as expected for most Machine Learning or Deep Learning models), then specify it false. Default true (noiseless).'\n    }\n]\n```\n",
        "operationId" : "startHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "multipart/form-data", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "If the model consists of one file then specify that file. If the model consists of a directory, then it's the tar of the directory with suffix \".modelDir.tar\"",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "data",
          "in" : "formData",
          "description" : "Python dict or json format, convert to string when calling REST.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully started hpo task.",
            "schema" : {
              "$ref" : "#/definitions/CreationResponse"
            }
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "409" : {
            "description" : "Conflict. The requested resource already exists."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Delete all hpo tasks",
        "description" : "Delete all hpo tasks.",
        "operationId" : "deleteAllHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted all the hpo tasks."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/hypersearch/algorithm" : {
      "get" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Retrieve all hpo algorithm by algorithm type.",
        "description" : "Get all the hpo tasks that the login user can access.",
        "operationId" : "getAllHPOAlgorithm",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "The algorithm type, BUILD_IN or USER_PLUGIN, if not specified, it will query all algorithms",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting hpo tasks.",
            "schema" : {
              "type" : "array",
              "description" : "A list of hpo algorithms.",
   } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting hpo tasks.",
            "schema" : {
              "type" : "array",
              "description" : "A list of hpo algorithms.",
   } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting hpo tasks.",
            "schema" : {
              "type" : "array",
              "description" : "A list of hpo algorithms.",
   } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulh/algorithm/install" : {
      "post" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Install a new hpo plugin algorithm",
        "description" : "Install a new hpo plugin algorithm by providing algorithm scipts as well as other required parameters.\n\nTo install a new hpo plugin algorithm, we need string format of input parameters, which is python dict or json format as below:\n\n## data sepcification:\n```\n{\n   'name': 'required, string, name/id for the plugin algorithm, should be unique.',\n   'path': 'optional, string, the path for plugin algorithm scripts on server, required for local installation mode.',\n   'condaHome': 'optional, string, the CONDA_HOME to run the algorithm scripts, it will use the DLI_CONDA_HOME if not specified.',\n   'condaEnv': 'optional, string, the conda environment to run the algorithm scripts, it will use the DLI default conda environment if not specified.',\n   'remoteExec': 'optional, boolean, whether to deploy algorithm execution remotely, the default value is false.',\n   'logLevel': 'optional, string, the log level of the plugin algorithm, the default value is INFO.'\n}\n```\n",
        "operationId" : "installHPOAlgorithm",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "multipart/form-data", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "tar the plugin algorithm directory with suffix \".tar\", require if the using upload installation mode",
          "required" : false,
          "type" : "file"
        }, {
          "name" : "data",
          "in" : "formData",
          "description" : "Python dict or json format, convert to string when calling REST.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully installed the hpo plugin algorithm.",
            "schema" : {
              "$ref" : "#/definitions/CreationResponse"
            }
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/hypersearch/algorithm/{algoName}" : {
      "get" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Retrieve the hpo algorithm detail",
        "description" : "Retrieve the hpo algorithm detail with the specified name in URL.",
        "operationId" : "getOneAlgorithm",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algoName",
          "in" : "path",
          "description" : "The hpo algorithm name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting hpo algorithm.",
            "schema" : {
              "$ref" : "#/definitions/HpoAlgorithmDesc"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Delete a hpo plugin algorithm",
        "description" : "Delete a hpo plugin algorithm.",
        "operationId" : "deleteOneHPOALGORITHM",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "algoName",
          "in" : "path",
          "description" : "The hpo plugin algorithm name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted the hpo plugin algorithm."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/hypersearch/{hpoName}" : {
      "get" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Retrieve the hpo task detail",
        "description" : "Retrieve the hpo task detail with the specified hpo task name in URL.",
        "operationId" : "getOneHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hpoName",
          "in" : "path",
          "description" : "The hpo task name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting hpo task.",
            "schema" : {
              "$ref" : "#/definitions/HpoTaskState"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "put" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Stops a hpo task",
        "description" : "Stops a running hpo task.",
        "operationId" : "stopOneHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hpoName",
          "in" : "path",
          "description" : "The HPO task name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully stopped the hpo task."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Delete a hpo task",
        "description" : "Delete a hpo task.",
        "operationId" : "deleteOneHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hpoName",
          "in" : "path",
          "description" : "The hpo task name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted the hpo task."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/hypersearch/{hpoName}/force" : {
      "put" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Stop a hpo task forcely",
        "description" : "Stop a running hpo task forcely.",
        "operationId" : "stopOneHPOForce",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hpoName",
          "in" : "path",
          "description" : "The hpo task name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully stopped the hpo task forcely."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/hypersearch/{hpoName}/restart" : {
      "put" : {
        "tags" : [ "HyperSearch" ],
        "summary" : "Restart a hpo task forcely",
        "description" : "Restart a stopped or recoverfailed hpo task.",
        "operationId" : "restartOneHPO",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "hpoName",
          "in" : "path",
          "description" : "The hpo task name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully restart the hpo task."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/inferences" : {
      "get" : {
        "tags" : [ "Inferences" ],
        "summary" : "Get all inference instances for a model",
        "description" : "Get all inference instances for a model.",
        "operationId" : "getAllPredictsByModelName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "query",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "flag",
          "in" : "query",
          "description" : "Save results to a file?  Currently, saving results is NOT supported, and the flag must be set to \"false\".",
          "required" : true,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing all inference instances for a model.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/InferenceDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "Inferences" ],
        "summary" : "Create a new inference from the model training.",
        "description" : "Create a new inference from the model training.",
        "operationId" : "createModelTrainInference",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "InferenceCreateParameters",
          "description" : "Parameters required to create a new inference instance.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/InferenceCreateParam"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created model inference."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/inferences/startpredict" : {
      "post" : {
        "tags" : [ "Inferences" ],
        "summary" : "Start predicting an inference model",
        "description" : "Start predicting an inference model by providing sample images as well as other required parameters.\n\n# NOTE\nYou can provide arbitrary number of image files as an input to start a prediction.  Here, we only require two files, as an example. \n",
        "operationId" : "startPredict",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "multipart/form-data", "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "image0",
          "in" : "formData",
          "description" : "First image file for testing the prediction",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "image1",
          "in" : "formData",
          "description" : "Second image file for testing the prediction",
          "required" : true,
          "type" : "file"
        }, {
          "name" : "modelname",
          "in" : "formData",
          "description" : "The model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "threshold",
          "in" : "formData",
          "description" : "The probability threshold for the classification.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "masterUrl",
          "in" : "formData",
          "description" : "The Spark instance group master URL.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sigid",
          "in" : "formData",
          "description" : "The Spark instance group ID.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "signame",
          "in" : "formData",
          "description" : "The Spark instance group name.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "predictname",
          "in" : "formData",
          "description" : "The prediction name. Must be unique.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully started prediction."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "409" : {
            "description" : "Conflict. The requested resource already exists."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/inferences/{predictName}" : {
      "get" : {
        "tags" : [ "Inferences" ],
        "summary" : "Get the inference instance details",
        "description" : "Retrieves the details for one model inference instance.",
        "operationId" : "getPredictByPredictName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "predictName",
          "in" : "path",
          "description" : "The prediction name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing inference detail for the specified prediction.",
            "schema" : {
              "$ref" : "#/definitions/InferenceDetail"
            }
          },
          "400" : {
            "description" : "The modification request is either missing required values or contains invalid values."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "409" : {
            "description" : "The modification request cannot be completed. The deep learning model is not in a valid state for modification."
          },
          "500" : {
            "description" : "An unexpected error."
          }
        }
      },
      "delete" : {
        "tags" : [ "Inferences" ],
        "summary" : "Deletes a prediction",
        "description" : "Deletes a prediction.",
        "operationId" : "deletePredict",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "predictName",
          "in" : "path",
          "description" : "The prediction name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the prediction."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/inferences/{predictName}/predicts" : {
      "get" : {
        "tags" : [ "Inferences" ],
        "summary" : "Get the prediction results for an inference",
        "description" : "Retrieves full prediction results for one inference instance.",
        "operationId" : "getPredictResults",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "predictName",
          "in" : "path",
          "description" : "The prediction name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing prediction details.",
            "schema" : {
              "$ref" : "#/definitions/PredictResult"
            }
          },
          "400" : {
            "description" : "The modification request is either missing required values or contains invalid values."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "409" : {
            "description" : "The modification request cannot be completed. The deep learning model is not in a valid state for modification."
          },
          "500" : {
            "description" : "An unexpected error."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/inferences/{predictName}/stop" : {
      "put" : {
        "tags" : [ "Inferences" ],
        "summary" : "Stops a prediction",
        "description" : "Stops a running prediction task.",
        "operationId" : "stopInference",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "predictName",
          "in" : "path",
          "description" : "The prediction name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stopped the prediction job."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models" : {
      "get" : {
        "tags" : [ "Models" ],
        "summary" : "Retrieves all models defined in the system",
        "description" : "Returns full listing of all the deep learning models defined in the system.",
        "operationId" : "getModels",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting deep learning models.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning models.",
              "items" : {
                "$ref" : "#/definitions/ModelDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "Models" ],
        "summary" : "Creates a new deep learning model",
        "description" : "Creates a new deep learning model.",
        "operationId" : "addModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "model",
          "description" : "The information that specifies the details of a deep learning model to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelCreateParam"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The deep learning model is created successfully."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "409" : {
            "description" : "Conflict. The requested resource already exists."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/files/{filename}" : {
      "get" : {
        "tags" : [ "Models" ],
        "summary" : "Retrieves the specified model file contents",
        "description" : "Returns the contents of a specified model file.",
        "operationId" : "getModelFileContentByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filename",
          "in" : "path",
          "description" : "The model file name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting contents of the specified model file.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/weightfile" : {
      "post" : {
        "tags" : [ "Models" ],
        "summary" : "Uploads a new weight file",
        "description" : "Upload a new weight file which can be used for trainings and inferences.",
        "operationId" : "uploadWf",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "multipart/form-data" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "Weight file for model training or inference.",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully uploaded a new weight file."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "409" : {
            "description" : "Conflict. The requested resource already exists."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}" : {
      "get" : {
        "tags" : [ "Models" ],
        "summary" : "Retrieves details for a model",
        "description" : "Returns full details for a deep learning model.",
        "operationId" : "getModelByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting deep learning model.",
            "schema" : {
              "$ref" : "#/definitions/ModelDetail"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "put" : {
        "tags" : [ "Models" ],
        "summary" : "Modifies a deep learning model",
        "description" : "Modifies a deep learning model.",
        "operationId" : "updateModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "model",
          "description" : "The deep learning model information.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelDetail"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deep learning model is modified on the server."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "Models" ],
        "summary" : "Deletes a deep learning model",
        "description" : "Deletes a deep learning model.",
        "operationId" : "deleteModel",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK. Successfully deleted the deep learning model."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/files" : {
      "get" : {
        "tags" : [ "Models" ],
        "summary" : "Retrieves model files",
        "description" : "Returns full list of the files related with the specified model.",
        "operationId" : "getModelFiles",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting files related with the specified model.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "put" : {
        "tags" : [ "Models" ],
        "summary" : "Modifies a deep learning model file",
        "description" : "Modifies a deep learning model file.",
        "operationId" : "saveModelFileContentByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "model",
          "description" : "The deep learning model information.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelDetail"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deep learning model file is modified on the server."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch" : {
      "get" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Retrieve all tunings for a model",
        "description" : "Returns full listing of all tunings for a deep learning model.",
        "operationId" : "getModelAutoTuningStatus",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains a list of all tunings for a deep learning model.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/HpoTaskDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Creates new model tuning",
        "description" : "Crates a new deep learning model tuning.",
        "operationId" : "startModelAutoTuning",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "tuningOpts",
          "description" : "The tuning parameters required to start model tuning.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HpoTaskInput"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deep learning model auto tuning has started."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource already exists."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch/{tuningname}" : {
      "get" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Retrieves tuning details",
        "description" : "Returns full details for a deep learning model tuning.",
        "operationId" : "getModelAutoTuningStatusByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains tuning details.",
            "schema" : {
              "$ref" : "#/definitions/HpoTaskDetail"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Deletes a model tuning",
        "description" : "Deletes a model tuning.",
        "operationId" : "DeleteModelAutoTuning",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the deep learning model tuning."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch/{tuningname}/create/{newmodelname}" : {
      "put" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Create a new model using the tuning result",
        "description" : "Create a new model using the tuning result.",
        "operationId" : "createModelUsingTuningResult",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "newmodelname",
          "in" : "path",
          "description" : "The deep learning new created model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "201" : {
            "description" : "Successfully created a new model using the tuning result."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch/{tuningname}/force" : {
      "put" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Stop a model tuning forcely",
        "description" : "Stops a running deep learning model tuning task forcely",
        "operationId" : "stopModelAutoTuningForce",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully stopped the hpo task forcely."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch/{tuningname}/restart" : {
      "put" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Restart a model tuning",
        "description" : "Restart a stopped or recoverfailed deep learning model tuning task",
        "operationId" : "restartModelAutoTuning",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully restart the hpo task."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch/{tuningname}/stop" : {
      "put" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Stops a model tuning task",
        "description" : "Stops a running deep learning model tuning task.",
        "operationId" : "stopModelAutoTuning",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stopped the tuning job."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/hypersearch/{tuningname}/update" : {
      "put" : {
        "tags" : [ "ModelTunings" ],
        "summary" : "Update the model using the tuning result",
        "description" : "Update the model using the tuning result.",
        "operationId" : "updateModelUsingTuningResult",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "tuningname",
          "in" : "path",
          "description" : "The deep learning tuning name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully updated the model using the tuning result."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/trainingnames" : {
      "get" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Get training names of all trainings for a specified model",
        "description" : "Get training names of all trainings for a specified model.",
        "operationId" : "getModelTrainingNames",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing a detailed list of all training names associated with a model.",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/trainings" : {
      "get" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Get status of all trainings for a specified model",
        "description" : "Get status of all trainings for a specified model.",
        "operationId" : "getModelTrainings",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing a detailed list of all trainings associated with a model.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/TrainDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Start a new model training task",
        "description" : "Start a new model training task.",
        "operationId" : "startModelTraining",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "trainingParameters",
          "description" : "The training parameters.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TrainingCreateParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully started model training."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested deep learning model name was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/trainings/{trainingname}" : {
      "get" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Get status of the specified training for a specified model",
        "description" : "Get status of the specified training for a specified model.",
        "operationId" : "getModelTrainingbyName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "trainingname",
          "in" : "path",
          "description" : "The deep learning training name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing a training with a specified training name associated with a model.",
            "schema" : {
              "$ref" : "#/definitions/TrainDetail"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Delete a model training",
        "description" : "Deletes a single deep learning model training.",
        "operationId" : "delModelTraining",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "trainingname",
          "in" : "path",
          "description" : "The deep learning training name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the deep learning model training."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/trainings/{trainingname}/stop" : {
      "put" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Stops a model training task",
        "description" : "Stops a running deep learning model training task.",
        "operationId" : "stopModelTraining",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "trainingname",
          "in" : "path",
          "description" : "The deep learning training name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stopped the training job."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/trainings/{trainingname}/weightfile" : {
      "get" : {
        "tags" : [ "ModelTrainings" ],
        "summary" : "Get weight files for a model training",
        "description" : "Retrieves weight files for a deep learning model training.",
        "operationId" : "getModelTrainingWeightfiles",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "trainingname",
          "in" : "path",
          "description" : "The deep learning training name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response containing the weight file name.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/validations" : {
      "get" : {
        "tags" : [ "ModelValidations" ],
        "summary" : "Retrieves all model validations",
        "description" : "Returns full listing of all the validations for a deep learning model.",
        "operationId" : "getValidations",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of all validations for the specified model.",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ValidateDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "ModelValidations" ],
        "summary" : "Starts a new model validation",
        "description" : "Starts a new validation for a deep learning model.",
        "operationId" : "startValidation",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "valParams",
          "description" : "The validation parameters",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ValidationCreateParam"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully started validation for a deep learning model."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not round."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/validations/{valname}" : {
      "delete" : {
        "tags" : [ "ModelValidations" ],
        "summary" : "Deletes a validation for a model",
        "description" : "Deletes a validation for a deep learning model.",
        "operationId" : "deleteValidation",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name to delete.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "valname",
          "in" : "path",
          "description" : "The deep learning validation name to delete.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted the model validation."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/models/{modelname}/validations/{valname}/stop" : {
      "put" : {
        "tags" : [ "ModelValidations" ],
        "summary" : "Stops a model validation task",
        "description" : "Stops a running deep learning model validation task.",
        "operationId" : "stopValidation",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modelname",
          "in" : "path",
          "description" : "The deep learning model name.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "valname",
          "in" : "path",
          "description" : "The deep learning validation name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully stopped the validation job."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/modeltemplates" : {
      "get" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Retrieves all deep learning model templates",
        "description" : "Retrieves all deep learning model templates.",
        "operationId" : "getModelTemplateDetails",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "framework",
          "in" : "query",
          "description" : "The deep learning framework name.",
          "required" : false,
          "type" : "string",
          "enum" : [ "Caffe", "TensorFlow", "PyTorch" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting deep learning model templates.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning model templates.",
              "items" : {
                "$ref" : "#/definitions/ModelTemplateDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "post" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Creates a new deep learning model template",
        "description" : "Creates a new deep learning model template.",
        "operationId" : "addModelTemplate",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "modeltemplate",
          "description" : "The information that specifies the details of a model template to create.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelTemplateCreateParam"
          }
        } ],
        "responses" : {
          "201" : {
            "description" : "The deep learning model template is created successfully."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "409" : {
            "description" : "Conflict. The requested resource already exists."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/modeltemplates/files/{filename}" : {
      "get" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Retrieves the specified model template file contents",
        "description" : "Returns the contents of a specified model template file.",
        "operationId" : "getModelTemplateFileContentByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "filename",
          "in" : "path",
          "description" : "The model template file name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting contents of the specified model template file.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/modeltemplates/{modeltemplatename}" : {
      "get" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Retrieves model template details",
        "description" : "Returns full details for the specified model template.",
        "operationId" : "getModelTemplateByName",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modeltemplatename",
          "in" : "path",
          "description" : "The deep learning model template name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting deep learning model template.",
            "schema" : {
              "$ref" : "#/definitions/ModelTemplateDetail"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "put" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Modifies a deep learning model template",
        "description" : "Modifies a deep learning model template.",
        "operationId" : "updateModelTemplate",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modeltemplatename",
          "in" : "path",
          "description" : "The deep learning model template name.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "modeltemplate",
          "description" : "The deep learning model template information.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModelTemplateDetail"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The deep learning model template is modified on the server."
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "delete" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Deletes a model template",
        "description" : "Deletes a deep learning model template.",
        "operationId" : "deleteModelTemplate",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modeltemplatename",
          "in" : "path",
          "description" : "The deep learning model template name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Ok. Successfully deleted the deep learning model template."
          },
          "400" : {
            "description" : "The request format is invalid."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource is not found."
          },
          "409" : {
            "description" : "Conflict. The requested resource cannot be deleted because it is in use."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/modeltemplates/{modeltemplatename}/files" : {
      "get" : {
        "tags" : [ "ModelTemplates" ],
        "summary" : "Retrieves model template files",
        "description" : "Returns full list of the files related with the specified model template.",
        "operationId" : "getModelTemplateFiles",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "modeltemplatename",
          "in" : "path",
          "description" : "The deep learning model template name.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response that contains the resulting files related with the specified model template.",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "404" : {
            "description" : "The requested resource was not found."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/scheduler/applications" : {
      "get" : {
        "tags" : [ "Scheduler" ],
        "summary" : "Retrieves deep learning Spark applications",
        "description" : "Retrieves deep learning Spark applications.",
        "operationId" : "getApplications",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "applicationid",
          "in" : "query",
          "description" : "The ID of the Spark application.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "applicationname",
          "in" : "query",
          "description" : "The name of the Spark application.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "driverid",
          "in" : "query",
          "description" : "The ID of the Spark application driver.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "search",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The field name to sort the response by. Only one field name can be specified as the sort type. Prefix the field name with \"-\" to sort in descending order.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "order",
          "in" : "query",
          "description" : "order",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "start",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "length",
          "in" : "query",
          "description" : "length",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "state",
          "in" : "query",
          "description" : "state",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sigId",
          "in" : "query",
          "description" : "The ID of the Spark instance group",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful response which contains a list of deep learning Spark applications.",
            "schema" : {
              "type" : "array",
              "description" : "A list of deep learning Spark applications.",
              "items" : {
                "$ref" : "#/definitions/SparkApplicationDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "416" : {
            "description" : "An index is out of range."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    },
    "/platform/rest/deeplearning/v1/scheduler/instances" : {
      "get" : {
        "tags" : [ "Scheduler" ],
        "summary" : "Retrieves all Spark application instances",
        "description" : "Retrieves all the Spark application instances.",
        "operationId" : "getAppInstances",
        "schemes" : [ "http", "https" ],
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful response which contains a list of deep learning Spark application instances.",
            "schema" : {
              "type" : "array",
              "description" : "A list of application instances",
              "items" : {
                "$ref" : "#/definitions/SigAppInstanceDetail"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was not formatted correctly."
          },
          "401" : {
            "description" : "Authentication error. The request was denied."
          },
          "403" : {
            "description" : "Forbidden. The request was denied."
          },
          "500" : {
            "description" : "An unexpected error occurred."
          }
        }
      },
      "parameters" : [ ]
    }
  },
  "x-ibm-services" : [ "/platform/rest/deeplearning/v1" ]
}
